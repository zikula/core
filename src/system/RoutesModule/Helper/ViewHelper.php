<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.1 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Helper;

use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\Templating\EngineInterface;
use Zikula\Bundle\CoreBundle\DynamicConfigDumper;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ExtensionsModule\Api\ExtensionApi;
use Zikula\ExtensionsModule\Api\VariableApi;
use Zikula\ExtensionsModule\Entity\ExtensionEntity;
use Zikula\ExtensionsModule\Entity\RepositoryInterface\ExtensionRepositoryInterface;
use Zikula\PermissionsModule\Api\ApiInterface\PermissionApiInterface;
use Zikula\RoutesModule\Entity\RouteEntity;
use Zikula\RoutesModule\Helper\Base\AbstractViewHelper;

/**
 * Utility implementation class for view helper methods.
 */
class ViewHelper extends AbstractViewHelper
{
    /**
     * @var TranslatorInterface
     */
    private $translator;

    /**
     * @var DynamicConfigDumper
     */
    private $configDumper;

    /**
     * @var ExtensionRepositoryInterface
     */
    private $extensionRepository;

    /**
     * @param TranslatorInterface $translator
     * @param DynamicConfigDumper $configDumper
     * @param ExtensionRepositoryInterface $extensionRepository
     */
    public function setAdditionalDependencies(
        TranslatorInterface $translator,
        DynamicConfigDumper $configDumper,
        ExtensionRepositoryInterface $extensionRepository
    ) {
        $this->translator = $translator;
        $this->configDumper = $configDumper;
        $this->extensionRepository = $extensionRepository;
    }

    /**
     * {@inheritdoc}
     */
    public function processTemplate($type, $func, array $templateParameters = [], $template = '')
    {
        $enrichedTemplateParameters = $templateParameters;

        if ($type == 'route' && $func == 'view') {
            $groupMessages = [
                RouteEntity::POSITION_FIXED_TOP => $this->translator->__('Routes fixed to the top of the list:'),
                RouteEntity::POSITION_MIDDLE => $this->translator->__('Normal routes:'),
                RouteEntity::POSITION_FIXED_BOTTOM => $this->translator->__('Routes fixed to the bottom of the list:'),
            ];
            $enrichedTemplateParameters['groupMessages'] = $groupMessages;
            $enrichedTemplateParameters['sortableGroups'] = [RouteEntity::POSITION_MIDDLE];

            $enrichedTemplateParameters['jms_i18n_routing'] = $this->configDumper->getConfigurationForHtml('jms_i18n_routing');
        } elseif ($type == 'route' && $func == 'edit') {
            $urlNames = [];
            /** @var ExtensionEntity[] $modules */
            $modules = $this->extensionRepository->findBy(['state' => ExtensionApi::STATE_ACTIVE]);
            foreach ($modules as $module) {
                $urlNames[$module->getName()] = $module->getUrl();
            }
            $enrichedTemplateParameters['moduleUrlNames'] = $urlNames;
        }

        return parent::processTemplate($type, $func, $enrichedTemplateParameters, $template);
    }
}
