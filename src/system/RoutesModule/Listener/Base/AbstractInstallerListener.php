<?php

/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\RoutesModule\Listener\Base;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Zikula\ExtensionsModule\Event\ModuleStateEvent;
use Zikula\ExtensionsModule\ExtensionEvents;

/**
 * Event handler base class for module installer events.
 */
abstract class AbstractInstallerListener implements EventSubscriberInterface
{
    public static function getSubscribedEvents()
    {
        return [
            ExtensionEvents::MODULE_INSTALL     => ['moduleInstalled', 5],
            ExtensionEvents::MODULE_POSTINSTALL => ['modulePostInstalled', 5],
            ExtensionEvents::MODULE_UPGRADE     => ['moduleUpgraded', 5],
            ExtensionEvents::MODULE_ENABLE      => ['moduleEnabled', 5],
            ExtensionEvents::MODULE_DISABLE     => ['moduleDisabled', 5],
            ExtensionEvents::MODULE_REMOVE      => ['moduleRemoved', 5]
        ];
    }
    
    /**
     * Listener for the `module.install` event.
     *
     * Called after a module has been successfully installed.
     * The event allows accessing the module bundle and the extension
     * information array using `$event->getModule()` and `$event->getModInfo()`.
     *
     * You can access general data available in the event.
     *
     * The event name:
     *     `echo 'Event: ' . $event->getName();`
     *
     */
    public function moduleInstalled(ModuleStateEvent $event): void
    {
    }
    
    /**
     * Listener for the `module.postinstall` event.
     *
     * Called after a module has been installed (on reload of the extensions view).
     * The event allows accessing the module bundle and the extension
     * information array using `$event->getModule()` and `$event->getModInfo()`.
     *
     * You can access general data available in the event.
     *
     * The event name:
     *     `echo 'Event: ' . $event->getName();`
     *
     */
    public function modulePostInstalled(ModuleStateEvent $event): void
    {
    }
    
    /**
     * Listener for the `module.upgrade` event.
     *
     * Called after a module has been successfully upgraded.
     * The event allows accessing the module bundle and the extension
     * information array using `$event->getModule()` and `$event->getModInfo()`.
     *
     * You can access general data available in the event.
     *
     * The event name:
     *     `echo 'Event: ' . $event->getName();`
     *
     */
    public function moduleUpgraded(ModuleStateEvent $event): void
    {
    }
    
    /**
     * Listener for the `module.enable` event.
     *
     * Called after a module has been successfully enabled.
     * The event allows accessing the module bundle and the extension
     * information array using `$event->getModule()` and `$event->getModInfo()`.
     *
     * You can access general data available in the event.
     *
     * The event name:
     *     `echo 'Event: ' . $event->getName();`
     *
     */
    public function moduleEnabled(ModuleStateEvent $event): void
    {
    }
    
    /**
     * Listener for the `module.disable` event.
     *
     * Called after a module has been successfully disabled.
     * The event allows accessing the module bundle and the extension
     * information array using `$event->getModule()` and `$event->getModInfo()`.
     *
     * You can access general data available in the event.
     *
     * The event name:
     *     `echo 'Event: ' . $event->getName();`
     *
     */
    public function moduleDisabled(ModuleStateEvent $event): void
    {
    }
    
    /**
     * Listener for the `module.remove` event.
     *
     * Called after a module has been successfully removed.
     * The event allows accessing the module bundle and the extension
     * information array using `$event->getModule()` and `$event->getModInfo()`.
     *
     * You can access general data available in the event.
     *
     * The event name:
     *     `echo 'Event: ' . $event->getName();`
     *
     */
    public function moduleRemoved(ModuleStateEvent $event): void
    {
    }
}
