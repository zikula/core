<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Listener;

use Zikula\RoutesModule\Listener\Base\UserListener as BaseUserListener;
use Zikula\Core\Event\GenericEvent;

/**
 * Event handler implementation class for user-related events.
 */
class UserListener extends BaseUserListener
{
    /**
     * Makes our handlers known to the event system.
     */
    public static function getSubscribedEvents()
    {
        return parent::getSubscribedEvents();
    }

    /**
     * Listener for the `user.gettheme` event.
     *
     * Called during UserUtil::getTheme() and is used to filter the results.
     * Receives arg['type'] with the type of result to be filtered
     * and the $themeName in the $event->data which can be modified.
     * Must $event->stopPropagation() if handler performs filter.
     *
     * @param GenericEvent $event The event instance.
     */
    public function getTheme(GenericEvent $event)
    {
        parent::getTheme($event);

        // you can access general data available in the event

        // the event name
        // echo 'Event: ' . $event->getName();

        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }

        // kernel instance handling the current request
        // $kernel = $event->getKernel();

        // the currently handled request
        // $request = $event->getRequest();
    }

    /**
     * Listener for the `user.account.create` event.
     *
     * Occurs after a user account is created. All handlers are notified.
     * It does not apply to creation of a pending registration.
     * The full user record created is available as the subject.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     * The subject of the event is set to the user record that was created.
     *
     * @param GenericEvent $event The event instance.
     */
    public function create(GenericEvent $event)
    {
        parent::create($event);

        // you can access general data available in the event

        // the event name
        // echo 'Event: ' . $event->getName();

        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }

        // kernel instance handling the current request
        // $kernel = $event->getKernel();

        // the currently handled request
        // $request = $event->getRequest();
    }

    /**
     * Listener for the `user.account.update` event.
     *
     * Occurs after a user is updated. All handlers are notified.
     * The full updated user record is available as the subject.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     * The subject of the event is set to the user record, with the updated values.
     *
     * @param GenericEvent $event The event instance.
     */
    public function update(GenericEvent $event)
    {
        parent::update($event);

        // you can access general data available in the event

        // the event name
        // echo 'Event: ' . $event->getName();

        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }

        // kernel instance handling the current request
        // $kernel = $event->getKernel();

        // the currently handled request
        // $request = $event->getRequest();
    }

    /**
     * Listener for the `user.account.delete` event.
     *
     * Occurs after a user is deleted from the system.
     * All handlers are notified.
     * The full user record deleted is available as the subject.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     * The subject of the event is set to the user record that is being deleted.
     *
     * @param GenericEvent $event The event instance.
     */
    public function delete(GenericEvent $event)
    {
        parent::delete($event);

        // you can access general data available in the event

        // the event name
        // echo 'Event: ' . $event->getName();

        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }

        // kernel instance handling the current request
        // $kernel = $event->getKernel();

        // the currently handled request
        // $request = $event->getRequest();
    }
}
