<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.4 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Listener;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Zikula\Bundle\CoreBundle\CacheClearer;
use Zikula\Core\CoreEvents;
use Zikula\Core\Event\GenericEvent;
use Zikula\Core\Event\ModuleStateEvent;
use Zikula\RoutesModule\Helper\MultilingualRoutingHelper;
use Zikula\RoutesModule\Helper\RouteDumperHelper;
use Zikula\RoutesModule\Listener\Base\AbstractInstallerListener;

/**
 * Event handler implementation class for module installer events.
 */
class InstallerListener extends AbstractInstallerListener
{
    private $cacheClearer;

    private $routeDumperHelper;

    private $multilingualRoutingHelper;

    /**
     * @inheritDoc
     */
    public static function getSubscribedEvents()
    {
        // override subscription to ALL available events to only needed events.
        return [
            CoreEvents::MODULE_POSTINSTALL => ['modulePostInstalled', 5],
            CoreEvents::MODULE_UPGRADE => ['moduleUpgraded', 5],
            CoreEvents::MODULE_REMOVE => ['moduleRemoved', 5],
            'new.routes.avail' => ['newRoutesAvail', 5]
        ];
    }

    /**
     * InstallerListener constructor.
     *
     * @param ObjectManager $objectManager
     */
    public function __construct(
        CacheClearer $cacheClearer,
        RouteDumperHelper $routeDumperHelper,
        MultilingualRoutingHelper $multilingualRoutingHelper
    ) {
        $this->cacheClearer = $cacheClearer;
        $this->routeDumperHelper = $routeDumperHelper;
        $this->multilingualRoutingHelper = $multilingualRoutingHelper;
    }

    /**
     * @inheritDoc
     */
//    public function moduleInstalled(ModuleStateEvent $event)
//    {
//        parent::moduleInstalled($event);
//    }

    /**
     * @inheritDoc
     */
    public function modulePostInstalled(ModuleStateEvent $event)
    {
        parent::modulePostInstalled($event);

        $module = $event->getModule();
        if ($module === null) {
            return;
        }

        if ($module->getName() === 'ZikulaRoutesModule') {
            // Reload multilingual routing settings.
            $this->multilingualRoutingHelper->reloadMultilingualRoutingSettings();
        }

        $this->cacheClearer->clear('symfony.routing');

        // dumping the JS routes after module install occurs in \Zikula\ExtensionsModule\Controller\AdminController::viewAction
    }

    /**
     * @inheritDoc
     */
    public function moduleUpgraded(ModuleStateEvent $event)
    {
        parent::moduleUpgraded($event);

        $module = $event->getModule();
        if ($module === null) {
            return;
        }

        $this->cacheClearer->clear('symfony.routing');

        // reload **all** JS routes
        $this->routeDumperHelper->dumpJsRoutes();
    }

    /**
     * @inheritDoc
     */
//    public function moduleEnabled(ModuleStateEvent $event)
//    {
//        parent::moduleEnabled($event);
//    }

    /**
     * @inheritDoc
     */
//    public function moduleDisabled(ModuleStateEvent $event)
//    {
//        parent::moduleDisabled($event);
//    }

    /**
     * @inheritDoc
     */
    public function moduleRemoved(ModuleStateEvent $event)
    {
        parent::moduleRemoved($event);

        $module = $event->getModule();
        if (null === $module || $module->getName() == 'ZikulaRoutesModule') {
            return;
        }

        // reload **all** JS routes
        $this->routeDumperHelper->dumpJsRoutes();

        $this->cacheClearer->clear('symfony.routing');
    }

    /**
     * @inheritDoc
     */
//    public function subscriberAreaUninstalled(GenericEvent $event)
//    {
//        parent::subscriberAreaUninstalled($event);
//    }

    /**
     * @inheritDoc
     */
    public function newRoutesAvail(GenericEvent $event)
    {
        // reload **all** JS routes
        $this->routeDumperHelper->dumpJsRoutes();
    }
}
