<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Listener;

use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Routing\RouteCollection;
use Zikula\RoutesModule\Helper\RouteDumperHelper;
use Zikula\RoutesModule\Listener\Base\InstallerListener as BaseInstallerListener;
use Zikula\RoutesModule\Routing\RouteFinder;
use Zikula\Core\AbstractModule;
use Zikula\Core\CoreEvents;
use Zikula\Core\Event\GenericEvent;
use Zikula\Core\Event\ModuleStateEvent;
use Zikula\Bundle\CoreBundle\CacheClearer;

/**
 * Event handler implementation class for module installer events.
 */
class InstallerListener extends BaseInstallerListener
{
    private $em;

    private $routeFinder;

    private $cacheClearer;

    private $routeDumperHelper;

    public static function getSubscribedEvents()
    {
        // override subscription to ALL available events to only needed events.
        return [
            CoreEvents::MODULE_POSTINSTALL => ['modulePostInstalled', 5],
            CoreEvents::MODULE_UPGRADE => ['moduleUpgraded', 5],
            CoreEvents::MODULE_REMOVE => ['moduleRemoved', 5],
            'new.routes.avail' => ['newRoutesAvail', 5]
        ];
    }

    public function __construct(EntityManagerInterface $em, RouteFinder $routeFinder, CacheClearer $cacheClearer, RouteDumperHelper $routeDumperHelper)
    {
        $this->em = $em;
        $this->routeFinder = $routeFinder;
        $this->cacheClearer = $cacheClearer;
        $this->routeDumperHelper = $routeDumperHelper;
    }

    /**
     * Listener for the `module.install` event.
     *
     * Called after a module has been successfully installed.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
//    public function moduleInstalled(ModuleStateEvent $event)
//    {
//        parent::moduleInstalled($event);
//    }

    /**
     * Listener for the `module.postinstall` event.
     *
     * Called after a module has been installed (on reload of the extensions view).
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function modulePostInstalled(ModuleStateEvent $event)
    {
        parent::modulePostInstalled($event);

        $module = $event->getModule();
        if ($module === null) {
            return;
        }

        if ($module->getName() === 'ZikulaRoutesModule') {
            // Reload multilingual routing settings.
            \ModUtil::apiFunc('ZikulaRoutesModule', 'admin', 'reloadMultilingualRoutingSettings');
        }

        $this->cacheClearer->clear('symfony.routing');

        // dumping the JS routes after module install occurs in \Zikula\ExtensionsModule\Controller\AdminController::viewAction
    }

    /**
     * Listener for the `module.upgrade` event.
     *
     * Called after a module has been successfully upgraded.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function moduleUpgraded(ModuleStateEvent $event)
    {
        parent::moduleUpgraded($event);

        $module = $event->getModule();
        if ($module === null) {
            return;
        }

        $this->cacheClearer->clear('symfony.routing');

        // reload **all** JS routes
        $this->routeDumperHelper->dumpJsRoutes();
    }

    /**
     * Listener for the `module.enable` event.
     *
     * Called after a module has been successfully enabled.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
//    public function moduleEnabled(ModuleStateEvent $event)
//    {
//        parent::moduleEnabled($event);
//    }

    /**
     * Listener for the `module.disable` event.
     *
     * Called after a module has been successfully disabled.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
//    public function moduleDisabled(ModuleStateEvent $event)
//    {
//        parent::moduleDisabled($event);
//    }

    /**
     * Listener for the `module.remove` event.
     *
     * Called after a module has been successfully removed.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function moduleRemoved(ModuleStateEvent $event)
    {
        parent::moduleRemoved($event);

        $module = $event->getModule();
        if ($module === null || $module->getName() == 'ZikulaRoutesModule') {
            return;
        }

        // reload **all** JS routes
        $this->routeDumperHelper->dumpJsRoutes();

        $this->cacheClearer->clear('symfony.routing');
    }

    /**
     * Listener for the `installer.subscriberarea.uninstalled` event.
     *
     * Called after a hook subscriber area has been unregistered.
     * Receives args['areaid'] as the areaId. Use this to remove orphan data associated with this area.
     *
     * @param GenericEvent $event The event instance.
     */
//    public function subscriberAreaUninstalled(GenericEvent $event)
//    {
//        parent::subscriberAreaUninstalled($event);
//    }

    /**
     * Listener for the `new.routes.avail` generic event
     *
     * called in module installer process AFTER the MODULE_POSTINSTALL event
     *
     * @param GenericEvent $event
     */
    public function newRoutesAvail(GenericEvent $event)
    {
        // reload **all** JS routes
        $this->routeDumperHelper->dumpJsRoutes();
    }
}
