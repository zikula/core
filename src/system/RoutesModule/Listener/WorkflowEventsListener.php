<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.4 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Listener;

use Zikula\RoutesModule\Listener\Base\AbstractWorkflowEventsListener;
use Symfony\Component\Workflow\Event\Event;
use Symfony\Component\Workflow\Event\GuardEvent;

/**
 * Event handler implementation class for workflow events.
 *
 * @see /src/docs/Core-2.0/Workflows/WorkflowEvents.md
 */
class WorkflowEventsListener extends AbstractWorkflowEventsListener
{
    /**
     * @inheritDoc
     */
    public static function getSubscribedEvents()
    {
        return parent::getSubscribedEvents();
    }
    
    /**
     * @inheritDoc
     */
    public function onGuard(GuardEvent $event)
    {
        parent::onGuard($event);
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
        
        // access the entity
        // $entity = $event->getSubject();
        
        // access the marking
        // $entity = $event->getMarking();
        
        // access the transition
        // $entity = $event->getTransition();
        
        // starting from Symfony 3.3.0 you can also access the workflow name
        // $workflowName = $event->getWorkflowName();
    
        // example for preventing a transition
        // if (!$event->isBlocked()) {
        //     $event->setBlocked(true);
        // }
    }
    
    /**
     * @inheritDoc
     */
    public function onLeave(Event $event)
    {
        parent::onLeave($event);
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
        
        // access the entity
        // $entity = $event->getSubject();
        
        // access the marking
        // $entity = $event->getMarking();
        
        // access the transition
        // $entity = $event->getTransition();
        
        // starting from Symfony 3.3.0 you can also access the workflow name
        // $workflowName = $event->getWorkflowName();
    }
    
    /**
     * @inheritDoc
     */
    public function onTransition(Event $event)
    {
        parent::onTransition($event);
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
        
        // access the entity
        // $entity = $event->getSubject();
        
        // access the marking
        // $entity = $event->getMarking();
        
        // access the transition
        // $entity = $event->getTransition();
        
        // starting from Symfony 3.3.0 you can also access the workflow name
        // $workflowName = $event->getWorkflowName();
    }
    
    /**
     * @inheritDoc
     */
    public function onEnter(Event $event)
    {
        parent::onEnter($event);
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
        
        // access the entity
        // $entity = $event->getSubject();
        
        // access the marking
        // $entity = $event->getMarking();
        
        // access the transition
        // $entity = $event->getTransition();
        
        // starting from Symfony 3.3.0 you can also access the workflow name
        // $workflowName = $event->getWorkflowName();
    }
}
