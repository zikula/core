<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Api\Base;

use ModUtil;
use Zikula_AbstractBase;

/**
 * Selection api base class.
 */
class SelectionApi extends Zikula_AbstractBase
{
    /**
     * Gets the list of identifier fields for a given object type.
     *
     * @param string $args['ot'] The object type to be treated (optional)
     *
     * @return array List of identifier field names
     */
    public function getIdFields(array $args = [])
    {
        $objectType = $this->determineObjectType($args, 'getIdFields');
        $entityClass = 'ZikulaRoutesModule:' . ucfirst($objectType) . 'Entity';
    
        $em = $this->get('doctrine.entitymanager');
        $meta = $em->getClassMetadata($entityClass);
    
        if ($this->hasCompositeKeys($objectType)) {
            $idFields = $meta->getIdentifierFieldNames();
        } else {
            $idFields = [$meta->getSingleIdentifierFieldName()];
        }
    
        return $idFields;
    }
    
    /**
     * Checks whether a certain entity type uses composite keys or not.
     *
     * @param string $objectType The object type to retrieve
     *
     * @return boolean Whether composite keys are used or not
     */
    protected function hasCompositeKeys($objectType)
    {
        $controllerHelper = $this->get('zikula_routes_module.controller_helper');
    
        return $controllerHelper->hasCompositeKeys($objectType);
    }
    
    /**
     * Selects a single entity.
     *
     * @param string  $args['ot']       The object type to retrieve (optional)
     * @param mixed   $args['id']       The id (or array of ids) to use to retrieve the object (default=null)
     * @param boolean $args['useJoins'] Whether to include joining related objects (optional) (default=true)
     * @param boolean $args['slimMode'] If activated only some basic fields are selected without using any joins (optional) (default=false)
     *
     * @return mixed Desired entity object or null
     */
    public function getEntity(array $args = [])
    {
        if (!isset($args['id'])) {
            throw new \InvalidArgumentException($this->get('translator.default')->__('Invalid identifier received.'));
        }
        $objectType = $this->determineObjectType($args, 'getEntity');
        $repository = $this->getRepository($objectType);
    
        $idValues = $args['id'];
        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins']) : true;
        $slimMode = isset($args['slimMode']) ? ((bool) $args['slimMode']) : false;
    
        $entity = $repository->selectById($idValues, $useJoins, $slimMode);
    
        return $entity;
    }
    
    /**
     * Selects a list of entities by different criteria.
     *
     * @param string  $args['ot']       The object type to retrieve (optional)
     * @param string  $args['idList']   A list of ids to select (optional) (default=[])
     * @param string  $args['where']    The where clause to use when retrieving the collection (optional) (default='')
     * @param string  $args['orderBy']  The order-by clause to use when retrieving the collection (optional) (default='')
     * @param boolean $args['useJoins'] Whether to include joining related objects (optional) (default=true)
     * @param boolean $args['slimMode'] If activated only some basic fields are selected without using any joins (optional) (default=false)
     *
     * @return array with retrieved collection
     */
    public function getEntities(array $args = [])
    {
        $objectType = $this->determineObjectType($args, 'getEntities');
        $repository = $this->getRepository($objectType);
    
        $idList = isset($args['idList']) && is_array($args['idList']) ? $args['idList'] : [];
        $where = isset($args['where']) ? $args['where'] : '';
        $orderBy = isset($args['orderBy']) ? $args['orderBy'] : '';
        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins']) : true;
        $slimMode = isset($args['slimMode']) ? ((bool) $args['slimMode']) : false;
    
        if (!empty($idList)) {
           return $repository->selectByIdList($idList, $useJoins, $slimMode);
        }
    
        return $repository->selectWhere($where, $orderBy, $useJoins, $slimMode);
    }
    
    /**
     * Selects a list of entities by different criteria.
     *
     * @param string  $args['ot']             The object type to retrieve (optional)
     * @param string  $args['where']          The where clause to use when retrieving the collection (optional) (default='')
     * @param string  $args['orderBy']        The order-by clause to use when retrieving the collection (optional) (default='')
     * @param integer $args['currentPage']    Where to start selection
     * @param integer $args['resultsPerPage'] Amount of items to select
     * @param boolean $args['useJoins']       Whether to include joining related objects (optional) (default=true)
     * @param boolean $args['slimMode']       If activated only some basic fields are selected without using any joins (optional) (default=false)
     *
     * @return array with retrieved collection and amount of total records affected by this query
     */
    public function getEntitiesPaginated(array $args = [])
    {
        $objectType = $this->determineObjectType($args, 'getEntitiesPaginated');
        $repository = $this->getRepository($objectType);
    
        $where = isset($args['where']) ? $args['where'] : '';
        $orderBy = isset($args['orderBy']) ? $args['orderBy'] : '';
        $currentPage = isset($args['currentPage']) ? $args['currentPage'] : 1;
        $resultsPerPage = isset($args['resultsPerPage']) ? $args['resultsPerPage'] : 25;
        $useJoins = isset($args['useJoins']) ? ((bool) $args['useJoins']) : true;
        $slimMode = isset($args['slimMode']) ? ((bool) $args['slimMode']) : false;
    
        return $repository->selectWherePaginated($where, $orderBy, $currentPage, $resultsPerPage, $useJoins, $slimMode);
    }
    
    /**
     * Determines object type using controller util methods.
     *
     * @param string $args['ot'] The object type to retrieve (optional)
     * @param string $methodName Name of calling method
     *
     * @return string the object type
     */
    protected function determineObjectType(array $args = [], $methodName = '')
    {
        $objectType = isset($args['ot']) ? $args['ot'] : '';
        $controllerHelper = $this->get('zikula_routes_module.controller_helper');
        $utilArgs = ['api' => 'selection', 'action' => $methodName];
        if (!in_array($objectType, $controllerHelper->getObjectTypes('api', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('api', $utilArgs);
        }
    
        return $objectType;
    }
    
    /**
     * Returns repository instance for a certain object type.
     *
     * @param string $objectType The desired object type
     *
     * @return mixed Repository class instance or null
     */
    protected function getRepository($objectType = '')
    {
        if (empty($objectType)) {
            throw new \InvalidArgumentException($this->get('translator.default')->__('Invalid object type received.'));
        }
    
        $repository = $this->get('zikula_routes_module.' . $objectType . '_factory')->getRepository();
    
        return $repository;
    }
}
