<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Form\Handler\Route;

use ModUtil;
use Symfony\Component\Routing\RouteCollection;
use Zikula\RoutesModule\Entity\RouteEntity;
use Zikula\RoutesModule\Form\Handler\Route\Base\EditHandler as BaseEditHandler;
use Zikula\RoutesModule\Routing\Util as RoutingUtil;
use Zikula_Form_View;

/**
 * This handler class handles the page events of the Form called by the zikulaRoutesModule_admin_edit() function.
 * It aims on the route object type.
 */
class EditHandler extends BaseEditHandler
{
    public function initialize(Zikula_Form_View $view)
    {
        $items = [];
        $urlNames = [];
        $modules = ModUtil::getModulesByState(3, 'displayname');
        foreach ($modules as $module) {
            $items[] = [
                'text' => $module['displayname'],
                'value' => $module['name']
            ];
            $urlNames[$module['name']] = $module['url'];
        }
        $view->assign('modules', $items);
        $view->assign('moduleUrlNames', $urlNames);

        return parent::initialize($view);
    }

    public function applyAction(array $args = [])
    {
        $return = parent::applyAction($args);

        $this->checkConflicts($this->entityRef);

        $cacheClearer = $this->view->getContainer()->get('zikula.cache_clearer');
        $cacheClearer->clear("symfony.routing");

        return $return;
    }

    protected function writeRelationDataToEntity(Zikula_Form_View $view, $entity, $entityData)
    {
        $entityData = $this->sanitizeInput($entityData);

        return parent::writeRelationDataToEntity($view, $entity, $entityData);
    }

    private function sanitizeInput($entityData)
    {
        list($controller, ) = $this->sanitizeController($entityData['controller']);
        list($action, ) = $this->sanitizeAction($entityData['action']);

        $entityData['controller'] = $controller;
        $entityData['action'] = $action;
        $entityData['group'] = RouteEntity::POSITION_MIDDLE;
        $entityData['sort'] = 0;

        return $entityData;
    }

    private function checkConflicts(RouteEntity $routeEntity)
    {
        $newPath = $routeEntity->getPathWithBundlePrefix();

        $router = $this->view->getContainer()->get('router');
        /** @var RouteCollection $routeCollection */
        $routeCollection = $router->getRouteCollection();

        $errors = [];
        foreach ($routeCollection->all() as $route) {
            $path = $route->getPath();
            if ($path === '/{url}') {
                continue;
            }

            if ($path === $newPath) {
                $errors[] = [
                    'type' => 'SAME',
                    'path' => $path
                ];
                continue;
            }

            $pathRegExp = preg_quote(preg_replace("/{(.+)}/", "____DUMMY____", $path), '/');
            $pathRegExp = "#^" . str_replace('____DUMMY____', '(.+)', $pathRegExp) . "$#";

            $matches = [];
            preg_match($pathRegExp, $newPath, $matches);
            if (count($matches)) {
                $errors[] = [
                    'type' => 'SIMILAR',
                    'path' => $path
                ];
            }
        }

        foreach ($errors as $error) {
            if ($error['type'] == 'SAME') {
                $message = $this->__('It looks like you created or updated a route with a path which already exists. This is an error in most cases.');
            } else {
                $message = $this->__f('The path of the route you created or updated looks similar to the following already existing path: %s Are you sure you haven\'t just introduced a conflict?', $error['path']);
            }
            \LogUtil::registerError($message);
        }
    }

    /**
     * Sanitizes the action / func parameter.
     *
     * @param string $action
     *
     * @return array ($action, $func)
     */
    private function sanitizeAction($action)
    {
        if (substr($action, -6) !== 'Action') {
            $action .= 'Action';
        }

        $action = ucfirst($action);
        $func = lcfirst(substr($action, 0, -6));

        return [$action, $func];
    }

    /**
     * Sanitizes the controller / type parameter.
     *
     * @param string $controller
     *
     * @return array ($controller, $type)
     */
    private function sanitizeController($controller)
    {
        if (substr($controller, -10) !== 'Controller') {
            $type = $controller;
            $controller .= 'Controller';
        } else {
            $type = substr($controller, 0, -10);
        }

        $type = strtolower($type);
        $controller = ucfirst($controller);

        return [$controller, $type];
    }
}
