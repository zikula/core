<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Entity\Repository\Base;

use Gedmo\Sortable\Entity\Repository\SortableRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

use Doctrine\ORM\Tools\Pagination\Paginator;

use Symfony\Component\HttpFoundation\Request;
use Zikula\Component\FilterUtil\FilterUtil;
use Zikula\Component\FilterUtil\Config as FilterConfig;
use Zikula\Component\FilterUtil\PluginManager as FilterPluginManager;
use FormUtil;
use ModUtil;
use ServiceUtil;
use System;
use UserUtil;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the base repository class for route entities.
 */
class Route extends SortableRepository
{
    /**
     * @var string The default sorting field/expression.
     */
    protected $defaultSortingField = 'sort';

    /**
     * @var Request The request object given by the calling controller.
     */
    protected $request;

    /**
     * Retrieves an array with all fields which can be used for sorting instances.
     *
     * @return array
     */
    public function getAllowedSortingFields()
    {
        return [
            'id',
            'workflowState',
            'routeType',
            'replacedRouteName',
            'bundle',
            'controller',
            'action',
            'path',
            'host',
            'schemes',
            'methods',
            'prependBundlePrefix',
            'translatable',
            'translationPrefix',
            'defaults',
            'requirements',
            'condition',
            'description',
            'sort',
            'group',
            'createdUserId',
            'updatedUserId',
            'createdDate',
            'updatedDate',
        ];
    }

    /**
     * Get default sorting field.
     *
     * @return string
     */
    public function getDefaultSortingField()
    {
        return $this->defaultSortingField;
    }
    
    /**
     * Set default sorting field.
     *
     * @param string $defaultSortingField.
     *
     * @return void
     */
    public function setDefaultSortingField($defaultSortingField)
    {
        $this->defaultSortingField = $defaultSortingField;
    }
    
    /**
     * Get request.
     *
     * @return Request
     */
    public function getRequest()
    {
        return $this->request;
    }
    
    /**
     * Set request.
     *
     * @param Request $request.
     *
     * @return void
     */
    public function setRequest($request)
    {
        $this->request = $request;
    }
    

    /**
     * Returns name of the field used as title / name for entities of this repository.
     *
     * @return string Name of field to be used as title.
     */
    public function getTitleFieldName()
    {
        $fieldName = 'replacedRouteName';
    
        return $fieldName;
    }
    
    /**
     * Returns name of the field used for describing entities of this repository.
     *
     * @return string Name of field to be used as description.
     */
    public function getDescriptionFieldName()
    {
        $fieldName = 'bundle';
    
        return $fieldName;
    }
    
    /**
     * Returns name of first upload field which is capable for handling images.
     *
     * @return string Name of field to be used for preview images.
     */
    public function getPreviewFieldName()
    {
        $fieldName = '';
    
        return $fieldName;
    }
    
    /**
     * Returns name of the date(time) field to be used for representing the start
     * of this object. Used for providing meta data to the tag module.
     *
     * @return string Name of field to be used as date.
     */
    public function getStartDateFieldName()
    {
        $fieldName = 'createdDate';
    
        return $fieldName;
    }

    /**
     * Returns an array of additional template variables which are specific to the object type treated by this repository.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType).
     * @param array  $args    Additional arguments.
     *
     * @return array List of template variables to be assigned.
     */
    public function getAdditionalTemplateParameters($context = '', $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'actionHandler', 'block', 'contentType'])) {
            $context = 'controllerAction';
        }
    
        $templateParameters = [];
    
        if ($context == 'controllerAction') {
            $serviceManager = ServiceUtil::getManager();
            if (!isset($args['action'])) {
                $args['action'] = FormUtil::getPassedValue('func', 'index', 'GETPOST');
            }
            if (in_array($args['action'], ['index', 'view'])) {
                $templateParameters = $this->getViewQuickNavParameters($context, $args);
                $listHelper = $serviceManager->get('zikularoutesmodule.listentries_helper');
                $templateParameters['workflowStateItems'] = $listHelper->getEntries('route', 'workflowState');
                $templateParameters['routeTypeItems'] = $listHelper->getEntries('route', 'routeType');
                $templateParameters['schemesItems'] = $listHelper->getEntries('route', 'schemes');
                $templateParameters['methodsItems'] = $listHelper->getEntries('route', 'methods');
                $booleanSelectorItems = [
                    ['value' => 'no', 'text' => __('No')],
                    ['value' => 'yes', 'text' => __('Yes')]
                ];
                $templateParameters['prependBundlePrefixItems'] = $booleanSelectorItems;
                $templateParameters['translatableItems'] = $booleanSelectorItems;
            }
    
        }
    
        // in the concrete child class you could do something like
        // $parameters = parent::getAdditionalTemplateParameters($context, $args);
        // $parameters['myvar'] = 'myvalue';
        // return $parameters;
    
        return $templateParameters;
    }
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType).
     * @param array  $args    Additional arguments.
     *
     * @return array List of template variables to be assigned.
     */
    protected function getViewQuickNavParameters($context = '', $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'actionHandler', 'block', 'contentType'])) {
            $context = 'controllerAction';
        }
    
        $parameters = [];
        $parameters['workflowState'] = $this->request->query->get('workflowState', '');
        $parameters['routeType'] = $this->request->query->get('routeType', '');
        $parameters['schemes'] = $this->request->query->get('schemes', '');
        $parameters['methods'] = $this->request->query->get('methods', '');
        $parameters['q'] = $this->request->query->get('q', '');
        
        $parameters['prependBundlePrefix'] = $this->request->query->get('prependBundlePrefix', '');
        $parameters['translatable'] = $this->request->query->get('translatable', '');
    
        // in the concrete child class you could do something like
        // $parameters = parent::getViewQuickNavParameters($context, $args);
        // $parameters['myvar'] = 'myvalue';
        // return $parameters;
    
        return $parameters;
    }

    /**
     * Helper method for truncating the table.
     * Used during installation when inserting default data.
     *
     * @return void
     */
    public function truncateTable()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->delete('Zikula\RoutesModule\Entity\RouteEntity', 'tbl');
        $query = $qb->getQuery();
    
        $query->execute();
    
        $serviceManager = ServiceUtil::getManager();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} truncated the {entity} entity table.', ['app' => 'ZikulaRoutesModule', 'user' => UserUtil::getVar('uname'), 'entity' => 'route']);
    }
    /**
     * Updates the creator of all objects created by a certain user.
     *
     * @param integer $userId    The userid of the creator to be replaced.
     * @param integer $newUserId The new userid of the creator as replacement.
     *
     * @return void
     *
     * @throws InvalidArgumentException Thrown if invalid parameters are received
     */
    public function updateCreator($userId, $newUserId)
    {
        // check id parameter
        if ($userId == 0 || !is_numeric($userId)
         || $newUserId == 0 || !is_numeric($newUserId)) {
            throw new \InvalidArgumentException(__('Invalid user identifier received.'));
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->update('Zikula\RoutesModule\Entity\RouteEntity', 'tbl')
           ->set('tbl.createdUserId', $newUserId)
           ->where('tbl.createdUserId = :creator')
           ->setParameter('creator', $userId);
        $query = $qb->getQuery();
        $query->execute();
    
        $serviceManager = ServiceUtil::getManager();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} updated {entities} created by user id {userid}.', ['app' => 'ZikulaRoutesModule', 'user' => UserUtil::getVar('uname'), 'entities' => 'routes', 'userid' => $userId]);
    }
    
    /**
     * Updates the last editor of all objects updated by a certain user.
     *
     * @param integer $userId    The userid of the last editor to be replaced.
     * @param integer $newUserId The new userid of the last editor as replacement.
     *
     * @return void
     *
     * @throws InvalidArgumentException Thrown if invalid parameters are received
     */
    public function updateLastEditor($userId, $newUserId)
    {
        // check id parameter
        if ($userId == 0 || !is_numeric($userId)
         || $newUserId == 0 || !is_numeric($newUserId)) {
            throw new \InvalidArgumentException(__('Invalid user identifier received.'));
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->update('Zikula\RoutesModule\Entity\RouteEntity', 'tbl')
           ->set('tbl.updatedUserId', $newUserId)
           ->where('tbl.updatedUserId = :editor')
           ->setParameter('editor', $userId);
        $query = $qb->getQuery();
        $query->execute();
    
        $serviceManager = ServiceUtil::getManager();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} updated {entities} edited by user id {userid}.', ['app' => 'ZikulaRoutesModule', 'user' => UserUtil::getVar('uname'), 'entities' => 'routes', 'userid' => $userId]);
    }
    
    /**
     * Deletes all objects created by a certain user.
     *
     * @param integer $userId The userid of the creator to be removed.
     *
     * @return void
     *
     * @throws InvalidArgumentException Thrown if invalid parameters are received
     */
    public function deleteByCreator($userId)
    {
        // check id parameter
        if ($userId == 0 || !is_numeric($userId)) {
            throw new \InvalidArgumentException(__('Invalid user identifier received.'));
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->delete('Zikula\RoutesModule\Entity\RouteEntity', 'tbl')
           ->where('tbl.createdUserId = :creator')
           ->setParameter('creator', $userId);
        $query = $qb->getQuery();
    
        $query->execute();
    
        $serviceManager = ServiceUtil::getManager();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} deleted {entities} created by user id {userid}.', ['app' => 'ZikulaRoutesModule', 'user' => UserUtil::getVar('uname'), 'entities' => 'routes', 'userid' => $userId]);
    }
    
    /**
     * Deletes all objects updated by a certain user.
     *
     * @param integer $userId The userid of the last editor to be removed.
     *
     * @return void
     *
     * @throws InvalidArgumentException Thrown if invalid parameters are received
     */
    public function deleteByLastEditor($userId)
    {
        // check id parameter
        if ($userId == 0 || !is_numeric($userId)) {
            throw new \InvalidArgumentException(__('Invalid user identifier received.'));
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->delete('Zikula\RoutesModule\Entity\RouteEntity', 'tbl')
           ->where('tbl.updatedUserId = :editor')
           ->setParameter('editor', $userId);
        $query = $qb->getQuery();
    
        $query->execute();
    
        $serviceManager = ServiceUtil::getManager();
        $logger = $serviceManager->get('logger');
        $logger->debug('{app}: User {user} deleted {entities} edited by user id {userid}.', ['app' => 'ZikulaRoutesModule', 'user' => UserUtil::getVar('uname'), 'entities' => 'routes', 'userid' => $userId]);
    }

    /**
     * Adds id filters to given query instance.
     *
     * @param mixed                     $id The id (or array of ids) to use to retrieve the object.
     * @param Doctrine\ORM\QueryBuilder $qb Query builder to be enhanced.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    protected function addIdFilter($id, QueryBuilder $qb)
    {
        return $this->addIdListFilter([$id], $qb);
    }
    
    /**
     * Adds an array of id filters to given query instance.
     *
     * @param mixed                     $id The array of ids to use to retrieve the object.
     * @param Doctrine\ORM\QueryBuilder $qb Query builder to be enhanced.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    protected function addIdListFilter($idList, QueryBuilder $qb)
    {
        $orX = $qb->expr()->orX();
    
        foreach ($idList as $id) {
            // check id parameter
            if ($id == 0) {
                throw new \InvalidArgumentException(__('Invalid identifier received.'));
            }
    
            if (is_array($id)) {
                $andX = $qb->expr()->andX();
                foreach ($id as $fieldName => $fieldValue) {
                    $andX->add($qb->expr()->eq('tbl.' . $fieldName, $fieldValue));
                }
                $orX->add($andX);
            } else {
                $orX->add($qb->expr()->eq('tbl.id', $id));
            }
            
        }
    
        $qb->andWhere($orX);
    
        return $qb;
    }
    
    /**
     * Selects an object from the database.
     *
     * @param mixed   $id       The id (or array of ids) to use to retrieve the object (optional) (default=0).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false).
     *
     * @return array|Zikula\RoutesModule\Entity\RouteEntity retrieved data array or Zikula\RoutesModule\Entity\RouteEntity instance
     *
     * @throws InvalidArgumentException Thrown if invalid parameters are received
     */
    public function selectById($id = 0, $useJoins = true, $slimMode = false)
    {
        $results = $this->selectByIdList([$id]);
    
        return (count($results) > 0) ? $results[0] : null;
    }
    
    /**
     * Selects a list of objects with an array of ids
     *
     * @param mixed   $id       The array of ids to use to retrieve the objects (optional) (default=0).
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false).
     *
     * @return ArrayCollection collection containing retrieved Zikula\RoutesModule\Entity\RouteEntity instances
     *
     * @throws InvalidArgumentException Thrown if invalid parameters are received
     */
    public function selectByIdList($idList = [0], $useJoins = true, $slimMode = false)
    {
        $qb = $this->genericBaseQuery('', '', $useJoins, $slimMode);
        $qb = $this->addIdListFilter($idList, $qb);
    
        $query = $this->getQueryFromBuilder($qb);
    
        $results = $query->getResult();
    
        return (count($results) > 0) ? $results : null;
    }

    /**
     * Adds where clauses excluding desired identifiers from selection.
     *
     * @param Doctrine\ORM\QueryBuilder $qb        Query builder to be enhanced.
     * @param integer                   $excludeId The id (or array of ids) to be excluded from selection.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    protected function addExclusion(QueryBuilder $qb, $excludeId)
    {
        if ($excludeId > 0) {
            $qb->andWhere('tbl.id != :excludeId')
               ->setParameter('excludeId', $excludeId);
        }
    
        return $qb;
    }

    /**
     * Selects a list of objects with a given where clause.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false).
     *
     * @return ArrayCollection collection containing retrieved Zikula\RoutesModule\Entity\RouteEntity instances
     */
    public function selectWhere($where = '', $orderBy = '', $useJoins = true, $slimMode = false)
    {
        $qb = $this->genericBaseQuery($where, $orderBy, $useJoins, $slimMode);
        if (!$useJoins || !$slimMode) {
            $qb = $this->addCommonViewFilters($qb);
        }
    
        $query = $this->getQueryFromBuilder($qb);
    
        return $this->retrieveCollectionResult($query, $orderBy, false);
    }

    /**
     * Returns query builder instance for retrieving a list of objects with a given where clause and pagination parameters.
     *
     * @param Doctrine\ORM\QueryBuilder $qb             Query builder to be enhanced.
     * @param integer                   $currentPage    Where to start selection
     * @param integer                   $resultsPerPage Amount of items to select
     *
     * @return array Created query instance and amount of affected items.
     */
    public function getSelectWherePaginatedQuery(QueryBuilder $qb, $currentPage = 1, $resultsPerPage = 25)
    {
        $qb = $this->addCommonViewFilters($qb);
    
        $query = $this->getQueryFromBuilder($qb);
        $offset = ($currentPage-1) * $resultsPerPage;
    
        $query->setFirstResult($offset)
              ->setMaxResults($resultsPerPage);
        $count = 0; // will be set at a later stage (in calling method)
        
    
        return [$query, $count];
    }
    
    /**
     * Selects a list of objects with a given where clause and pagination parameters.
     *
     * @param string  $where          The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy        The order-by clause to use when retrieving the collection (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $useJoins       Whether to include joining related objects (optional) (default=true).
     * @param boolean $slimMode       If activated only some basic fields are selected without using any joins (optional) (default=false).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $useJoins = true, $slimMode = false)
    {
        $qb = $this->genericBaseQuery($where, $orderBy, $useJoins, $slimMode);
    
        $page = $currentPage;
    
        // check if we have any filters set
        $parameters = $this->getViewQuickNavParameters('', []);
        $hasFilters = false;
        foreach ($parameters as $k => $v) {
            if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                $hasFilters = true;
                break;
            }
        }
    
        if (!$hasFilters) {
            $serviceManager = ServiceUtil::getManager();
            $session = $serviceManager->get('session');
            if ($page > 1 || isset($_GET['pos'])) {
                // store current page in session
                $session->set('ZikulaRoutesModuleRoutesCurrentPage', $page);
            } else {
                // restore current page from session
                $page = $session->get('ZikulaRoutesModuleRoutesCurrentPage', 1);
                System::queryStringSetVar('pos', $page);
                if ($this->getRequest() !== null) {
                    $this->getRequest()->query->set('pos', $page);
                }
            }
        }
    
        list($query, $count) = $this->getSelectWherePaginatedQuery($qb, $page, $resultsPerPage);
    
        return $this->retrieveCollectionResult($query, $orderBy, true);
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param Doctrine\ORM\QueryBuilder $qb Query builder to be enhanced.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    public function addCommonViewFilters(QueryBuilder $qb)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST');
        if ($currentFunc == 'edit') {
            return $qb;
        }
    
        if ($this->getRequest() === null) {
            // if no request is set we return (#433)
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParameters('', []);
        foreach ($parameters as $k => $v) {
            if ($k == 'catId') {
                // single category filter
                if ($v > 0) {
                    $qb->andWhere('tblCategories.category = :category')
                       ->setParameter('category', $v);
                }
            } elseif ($k == 'catIdList') {
                // multi category filter
                /* old
                $qb->andWhere('tblCategories.category IN (:categories)')
                   ->setParameter('categories', $v);
                 */
                $qb = ModUtil::apiFunc('ZikulaRoutesModule', 'category', 'buildFilterClauses', ['qb' => $qb, 'ot' => 'route', 'catids' => $v]);
            } elseif (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $qb = $this->addSearchFilter($qb, $v);
                }
            } elseif (in_array($k, ['prependBundlePrefix', 'translatable'])) {
                // boolean filter
                if ($v == 'no') {
                    $qb->andWhere('tbl.' . $k . ' = 0');
                } elseif ($v == 'yes' || $v == '1') {
                    $qb->andWhere('tbl.' . $k . ' = 1');
                }
            } else {
                // field filter
                if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                    if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                        $qb->andWhere('tbl.' . $k . ' != :' . $k)
                           ->setParameter($k, substr($v, 1, strlen($v)-1));
                    } elseif (substr($v, 0, 1) == '%') {
                        $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                           ->setParameter($k, '%' . $v . '%');
                    } else {
                        $qb->andWhere('tbl.' . $k . ' = :' . $k)
                           ->setParameter($k, $v);
                   }
                }
            }
        }
    
        $qb = $this->applyDefaultFilters($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param Doctrine\ORM\QueryBuilder $qb         Query builder to be enhanced.
     * @param array                     $parameters List of determined filter options.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    protected function applyDefaultFilters(QueryBuilder $qb, $parameters = [])
    {
        $currentModule = ModUtil::getName();//FormUtil::getPassedValue('module', '', 'GETPOST');
        $currentLegacyControllerType = FormUtil::getPassedValue('lct', 'user', 'GETPOST');
        if ($currentLegacyControllerType == 'admin' && $currentModule == 'ZikulaRoutesModule') {
            return $qb;
        }
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved routes only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        return $qb;
    }

    /**
     * Selects entities by a given search fragment.
     *
     * @param string  $fragment       The fragment to search for.
     * @param array   $exclude        Comma separated list with ids to be excluded from search.
     * @param string  $orderBy        The order-by clause to use when retrieving the collection (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $useJoins       Whether to include joining related objects (optional) (default=true).
     *
     * @return Array with retrieved collection and amount of total records affected by this query.
     */
    public function selectSearch($fragment = '', $exclude = [], $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $useJoins = true)
    {
        $qb = $this->genericBaseQuery('', $orderBy, $useJoins);
        if (count($exclude) > 0) {
            $exclude = implode(', ', $exclude);
            $qb->andWhere('tbl.id NOT IN (:excludeList)')
               ->setParameter('excludeList', $exclude);
        }
    
        $qb = $this->addSearchFilter($qb, $fragment);
    
        list($query, $count) = $this->getSelectWherePaginatedQuery($qb, $currentPage, $resultsPerPage);
    
        return $this->retrieveCollectionResult($query, $orderBy, true);
    }
    
    /**
     * Adds where clause for search query.
     *
     * @param Doctrine\ORM\QueryBuilder $qb       Query builder to be enhanced.
     * @param string                    $fragment The fragment to search for.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    protected function addSearchFilter(QueryBuilder $qb, $fragment = '')
    {
        if ($fragment == '') {
            return $qb;
        }
    
        $fragment = str_replace('\'', '', \DataUtil::formatForStore($fragment));
        $fragmentIsNumeric = is_numeric($fragment);
    
        $where = '';
        if (!$fragmentIsNumeric) {
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.routeType = \'' . $fragment . '\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.replacedRouteName LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.bundle LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.controller LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.action LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.path LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.host LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.schemes = \'' . $fragment . '\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.methods = \'' . $fragment . '\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.translationPrefix LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.condition LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.description LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.group LIKE \'%' . $fragment . '%\'';
        } else {
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.routeType = \'' . $fragment . '\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.replacedRouteName LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.bundle LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.controller LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.action LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.path LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.host LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.schemes = \'' . $fragment . '\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.methods = \'' . $fragment . '\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.translationPrefix LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.condition LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.description LIKE \'%' . $fragment . '%\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.sort = \'' . $fragment . '\'';
            $where .= ((!empty($where)) ? ' OR ' : '');
            $where .= 'tbl.group LIKE \'%' . $fragment . '%\'';
        }
        $where = '(' . $where . ')';
    
        $qb->andWhere($where);
    
        return $qb;
    }

    /**
     * Performs a given database selection and post-processed the results.
     *
     * @param Doctrine\ORM\Query $query       The Query instance to be executed.
     * @param string             $orderBy     The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean            $isPaginated Whether the given query uses a paginator or not (optional) (default=false).
     *
     * @return Array with retrieved collection and (for paginated queries) the amount of total records affected.
     */
    public function retrieveCollectionResult(Query $query, $orderBy = '', $isPaginated = false)
    {
        if (!$isPaginated) {
            $result = $query->getResult();
        } else {
            $paginator = new Paginator($query, false);
    
            $count = count($paginator);
            $result = $paginator;
        }
    
        if (!$isPaginated) {
            return $result;
        }

        return [$result, $count];
    }

    /**
     * Returns query builder instance for a count query.
     *
     * @param string  $where    The where clause to use when retrieving the object count (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return Doctrine\ORM\QueryBuilder Created query builder instance.
     * @TODO fix usage of joins; please remove the first line and test.
     */
    protected function getCountQuery($where = '', $useJoins = true)
    {
        $useJoins = false;
    
        $selection = 'COUNT(tbl.id) AS numRoutes';
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
           ->from('Zikula\RoutesModule\Entity\RouteEntity', 'tbl');
    
        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }
    
        $this->genericBaseQueryAddWhere($qb, $where);
    
        return $qb;
    }
    
    /**
     * Selects entity count with a given where clause.
     *
     * @param string  $where      The where clause to use when retrieving the object count (optional) (default='').
     * @param boolean $useJoins   Whether to include joining related objects (optional) (default=true).
     * @param array   $parameters List of determined filter options.
     *
     * @return integer amount of affected records
     */
    public function selectCount($where = '', $useJoins = true, $parameters = [])
    {
        $qb = $this->getCountQuery($where, $useJoins);
    
        $qb = $this->applyDefaultFilters($qb, $parameters);
    
        $query = $qb->getQuery();
    
        return $query->getSingleScalarResult();
    }


    /**
     * Checks for unique values.
     *
     * @param string $fieldName  The name of the property to be checked
     * @param string $fieldValue The value of the property to be checked
     * @param int    $excludeId  Id of routes to exclude (optional).
     *
     * @return boolean result of this check, true if the given route does not already exist
     */
    public function detectUniqueState($fieldName, $fieldValue, $excludeId = 0)
    {
        $qb = $this->getCountQuery('', false);
        $qb->andWhere('tbl.' . $fieldName . ' = :' . $fieldName)
           ->setParameter($fieldName, $fieldValue);
    
        $qb = $this->addExclusion($qb, $excludeId);
    
        $query = $qb->getQuery();
    
        $count = $query->getSingleScalarResult();
    
        return ($count == 0);
    }

    /**
     * Builds a generic Doctrine query supporting WHERE and ORDER BY.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false).
     *
     * @return Doctrine\ORM\QueryBuilder query builder instance to be further processed
     */
    public function genericBaseQuery($where = '', $orderBy = '', $useJoins = true, $slimMode = false)
    {
        // normally we select the whole table
        $selection = 'tbl';
    
        if ($slimMode === true) {
            // but for the slim version we select only the basic fields, and no joins
    
            $selection = 'tbl.id';
            
            
            $selection .= ', tbl.path';
            
            
            $selection .= ', tbl.sort';
            
            $useJoins = false;
        }
    
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
           ->from('Zikula\RoutesModule\Entity\RouteEntity', 'tbl');
    
        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }
    
        $this->genericBaseQueryAddWhere($qb, $where);
        $this->genericBaseQueryAddOrderBy($qb, $orderBy);
    
        return $qb;
    }

    /**
     * Adds WHERE clause to given query builder.
     *
     * @param Doctrine\ORM\QueryBuilder $qb    Given query builder instance.
     * @param string                    $where The where clause to use when retrieving the collection (optional) (default='').
     *
     * @return Doctrine\ORM\QueryBuilder query builder instance to be further processed
     */
    protected function genericBaseQueryAddWhere(QueryBuilder $qb, $where = '')
    {
        if (!empty($where)) {
        // Use FilterUtil to support generic filtering.
        //$qb->where($where);
    
        // Create filter configuration.
        $filterConfig = new FilterConfig($qb);
    
        // Define plugins to be used during filtering.
        $filterPluginManager = new FilterPluginManager(
            $filterConfig,
    
            // Array of plugins to load.
            // If no plugin with default = true given the compare plugin is loaded and used for unconfigured fields.
            // Multiple objects of the same plugin with different configurations are possible.
            [
            ],
    
            // Allowed operators per field.
            // Array in the form "field name => operator array".
            // If a field is not set in this array all operators are allowed.
            []
        );
    
        // Request object to obtain the filter string (only needed if the filter is set via GET or it reads values from GET).
        // We do this not per default (for now) to prevent problems with explicite filters set by blocks or content types.
        // TODO readd automatic request processing (basically replacing applyDefaultFilters() and addCommonViewFilters()).
        $request = null;
    
        // Name of filter variable(s) (filterX).
        $filterKey = 'filter';
    
        // initialise FilterUtil and assign both query builder and configuration
        $filterUtil = new FilterUtil($filterPluginManager, $request, $filterKey);
    
        // set our given filter
        $filterUtil->setFilter($where);
    
        // you could add explicit filters at this point, something like
        // $filterUtil->addFilter('foo:eq:something,bar:gt:100');
        // read more at
        // https://github.com/zikula/core/blob/master/src/lib/Zikula/Component/FilterUtil/README.md
        // https://github.com/zikula/core/blob/master/src/lib/Zikula/Component/FilterUtil/Resources/docs/users.md
    
        // now enrich the query builder
        $filterUtil->enrichQuery();
        }
    
        $showOnlyOwnEntries = (int) FormUtil::getPassedValue('own', ModUtil::getVar('ZikulaRoutesModule', 'showOnlyOwnEntries', 0), 'GETPOST');
        if ($showOnlyOwnEntries == 1) {
            $uid = UserUtil::getVar('uid');
            $qb->andWhere('tbl.createdUserId = :creator')
               ->setParameter('creator', $uid);
        }
    
        return $qb;
    }

    /**
     * Adds ORDER BY clause to given query builder.
     *
     * @param Doctrine\ORM\QueryBuilder $qb      Given query builder instance.
     * @param string                    $orderBy The order-by clause to use when retrieving the collection (optional) (default='').
     *
     * @return Doctrine\ORM\QueryBuilder query builder instance to be further processed
     */
    protected function genericBaseQueryAddOrderBy(QueryBuilder $qb, $orderBy = '')
    {
        if ($orderBy == 'RAND()') {
            // random selection
            $qb->addSelect('MOD(tbl.id, ' . mt_rand(2, 15) . ') AS HIDDEN randomIdentifiers')
               ->add('orderBy', 'randomIdentifiers');
            $orderBy = '';
        } elseif (empty($orderBy)) {
            $orderBy = $this->defaultSortingField;
        }
    
        // add order by clause
        if (!empty($orderBy)) {
            if (strpos($orderBy, '.') === false) {
                $orderBy = 'tbl.' . $orderBy;
            }
            $qb->add('orderBy', $orderBy);
        }
    
        return $qb;
    }

    /**
     * Retrieves Doctrine query from query builder, applying FilterUtil and other common actions.
     *
     * @param Doctrine\ORM\QueryBuilder $qb Query builder instance
     *
     * @return Doctrine\ORM\Query query instance to be further processed
     */
    public function getQueryFromBuilder(QueryBuilder $qb)
    {
        $query = $qb->getQuery();
    
        return $query;
    }

    /**
     * Helper method to add join selections.
     *
     * @return String Enhancement for select clause.
     */
    protected function addJoinsToSelection()
    {
        $selection = '';
    
        return $selection;
    }
    
    /**
     * Helper method to add joins to from clause.
     *
     * @param Doctrine\ORM\QueryBuilder $qb query builder instance used to create the query.
     *
     * @return String Enhancement for from clause.
     */
    protected function addJoinsToFrom(QueryBuilder $qb)
    {
    
        return $qb;
    }
}
