<?php
/**
 * Copyright Zikula Foundation 2009 - Zikula Application Framework
 *
 * This work is contributed to the Zikula Foundation under one or more
 * Contributor Agreements and licensed to You under the following license:
 *
 * @license GNU/LGPLv3 (or at your option, any later version).
 * @package Zikula
 * @subpackage Users
 *
 * Please see the NOTICE file distributed with this source code for further
 * information regarding copyright and licensing.
 */

/**
 * Access to (non-administrative) user-initiated actions for the Users module.
 */
class Users_Controller_User extends Zikula_Controller
{
    /**
     * Post initialise.
     *
     * Run after construction.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // Set caching to false by default.
        $this->view->setCaching(false);
    }

    /**
     * Render and display the user's account panel. If he is not logged in, then redirect to the login screen.
     *
     * @return string The rendered template.
     */
    public function main()
    {
        // Security check
        if (!UserUtil::isLoggedIn()) {
            System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
        } elseif (!SecurityUtil::checkPermission('Users::', '::', ACCESS_READ)) {
            return LogUtil::registerPermissionError();
        }

        // The API function is called.
        $accountlinks = ModUtil::apiFunc('Users', 'user', 'accountLinks');

        if ($accountlinks == false) {
            return LogUtil::registerError($this->__('Error! No results found.'), 404);
        }

        $this->view->add_core_data();

        // Assign the items to the template
        $this->view->assign('accountlinks', $accountlinks);

        // Return the output that has been generated by this function
        return $this->view->fetch('users_user_main.tpl');
    }

    /**
     * Display the base user form (login/lostpassword/register options).
     *
     * @return string The rendered template.
     */
    public function view()
    {
        // If has logged in, header to index.php
        if (UserUtil::isLoggedIn()) {
            return System::redirect(System::getHomepageUrl());
        }

        // other vars
        $this->view->assign($this->getVars());

        return $this->view->fetch('users_user_view.tpl');
    }

    /**
     * Display the login form.
     *
     * Available Get Parameters:
     * - returnpage     (string) The encoded URL of the page to which the user is returned after a successful login.
     * - confirmtou     (int)    Whether the terms and policies need to be reconfirmed or not. 1 = reconfirm, otherwise do not reconfirm.
     * - changepassword (it)     Whether to force a change of password. 1 = force the change, otherwise do not.
     *
     * @param array $args All parameters passed to this function.
     *                    $args['confirmtou']     (int) Used as a default if the 'confirmtou' get parameter is not set.
     *                    $args['changepassword'] (int) Used as a default if the 'changepassword' get parameter is not set.
     *
     * @return string The rendered template.
     */
    public function loginScreen($args)
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        $returnurl = FormUtil::getPassedValue('returnpage', null, 'GET');
        $confirmtou = (int)FormUtil::getPassedValue('confirmtou', isset($args['confirmtou']) ? $args['confirmtou'] : 0, 'GET');
        $changepassword = (int)FormUtil::getPassedValue('changepassword', isset($args['changepassword']) ? $args['changepassword'] : 0, 'GET');
        $passwordtext = $changepassword ? $this->__('Current password') : $this->__('Password');

        // assign variables for the template
        if ($changepassword) {
            $this->view->assign('default_authmodule', 'Users')
                       ->assign('authmodule', 'Users')
                       ->assign('authmodules', array(ModUtil::getInfoFromName('Users')));
        } else {
            $this->view->assign('default_authmodule', $this->getVar('default_authmodule', 'Users'))
                       ->assign('authmodule', $this->getVar('default_authmodule', 'Users'))
                       ->assign('authmodules', array(ModUtil::getInfoFromName('Users')));
        }

        $this->view->assign('loginviaoption', $this->getVar('loginviaoption'))
                   ->assign('seclevel', System::getVar('seclevel'))
                   ->assign('allowregistration', $this->getVar('reg_allowreg'))
                   ->assign('returnurl', $returnurl);

        // do we have to show a note about reconfirming the terms of use?
        if (ModUtil::available('Legal') && (ModUtil::getVar('Legal', 'termsofuse') || ModUtil::getVar('Legal', 'privacypolicy'))) {
            $this->view->assign('tou_active', ModUtil::getVar('Legal', 'termsofuse', true))
                       ->assign('pp_active',  ModUtil::getVar('Legal', 'privacypolicy', true));
        } else {
            $confirmtou = 0;
        }

        // do we have to force the change of password?
        $this->view->assign('changepassword', $changepassword)
                   ->assign('confirmtou', $confirmtou)
                   ->assign('passwordtext', $passwordtext)
                   ->assign('use_password_strength_meter', $this->getVar('use_password_strength_meter'))
                   ->assign('minpass', $this->getVar('minpass'));

        return $this->view->fetch('users_user_loginscreen.tpl');
    }

    /**
     * Set an underage error message and route the user back to the first user page.
     *
     * @return bool True, and the user is redirected to the view function.
     */
    public function underAge()
    {
        LogUtil::registerError($this->__f('Sorry! You must be %s or over to register for a user account here.', $this->getVar('minage')));
        return System::redirect(ModUtil::url('Users', 'user', 'view'));
    }

    /**
     * Display the registration form.
     *
     * @return string The rendered template.
     */
    public function register()
    {
        // If has logged in, header to index.php
        if (UserUtil::isLoggedIn()) {
            return System::redirect(System::getHomepageUrl());
        }

        $userAgent = System::serverGetVar('HTTP_USER_AGENT');
        // Yes, the capital I in the module var name below is required.
        $illegalUserAgents = $this->getVar('reg_Illegaluseragents', '');
        $pattern = array('/^(\s*,\s*)+/D', '/\b(\s*,\s*)+\b/D', '/(\s*,\s*)+$/D');
        $replace = array('', '|', '');
        $illegalUserAgents = preg_replace($pattern, $replace, preg_quote($illegalUserAgents, '/'));
        if (!empty($illegalUserAgents)) {
            if (preg_match("/^({$illegalUserAgents})/iD", $userAgent)) {
                return LogUtil::registerError($this->__('Sorry! The user agent specified is banned.'), 403, System::getHomepageUrl());
            }
        }

        // If we are returning here from validation errors detected in registerNewUser, then get the data already entered
        $args = SessionUtil::getVar('Users_User_register', array(), '/', false);
        SessionUtil::delVar('Users_User_register');

        $rendererArgs = array();
        $modVars = $this->getVars();
        $rendererArgs['sitename'] = System::getVar('sitename', System::getHost());
        $rendererArgs['minpass'] = (isset($modVars['minpass']) && !empty($modVars['minpass']))
            ? $modVars['minpass']
            : 5;
        $rendererArgs['regAllowed'] = (isset($modVars['reg_allowreg']) && !empty($modVars['reg_allowreg']))
            ? $modVars['reg_allowreg']
            : false;
        $rendererArgs['regOffReason'] = (isset($modVars['$reg_noregreasons']) && !empty($modVars['$reg_noregreasons']))
            ? $modVars['$reg_noregreasons']
            : $this->__('We will begin accepting new registrations again as quickly as possible. Please check back with us soon!');

        // check if we've agreed to the age limit. We have if we just came from there, or $args is set
        if (($this->getVar('minage', 0) != 0) && !stristr(System::serverGetVar('HTTP_REFERER'), 'register')) {
            $template = 'users_user_checkage.tpl';

            $rendererArgs['minimumAge'] = (isset($modVars['minage']) && !empty($modVars['minage'])) ? $modVars['minage'] : 13;
        } else {
            $template = 'users_user_register.tpl';

            $registrationErrors = isset($args['registrationErrors']) ? $args['registrationErrors'] : array();
            // For now do it this way. Later maybe show the messages with the field--and if that's
            // done, then $errorFields and $errorMessages not needed--we'd just pass $registrationErrors directly.
            $errorInfo = ModUtil::apiFunc('Users', 'user', 'processRegistrationErrorsForDisplay', array('registrationErrors' => $registrationErrors));

            $rendererArgs = array_merge($rendererArgs, $args);
            $legalModAvailable = ModUtil::available('Legal');
            $profileModName = System::getVar('profilemodule', '');
            $profileModAvailable = !empty($profileModName) && ModUtil::available($profileModName);
            $rendererArgs['touActive'] = $legalModAvailable && ModUtil::getVar('Legal', 'termsofuse', true);
            $rendererArgs['ppActive'] = $legalModAvailable && ModUtil::getVar('Legal', 'privacypolicy', true);
            $rendererArgs['userMustAccept'] = $rendererArgs['touActive'] || $rendererArgs['ppActive'];
            $rendererArgs['errorMessages'] = (isset($errorInfo['errorMessages']) && !empty($errorInfo['errorMessages'])) ? $errorInfo['errorMessages'] : array();
            $rendererArgs['errorFields'] = (isset($errorInfo['errorFields']) && !empty($errorInfo['errorFields'])) ? $errorInfo['errorFields'] : array();
            $rendererArgs['registrationErrors'] = (isset($registrationErrors) && !empty($registrationErrors)) ? $registrationErrors : array();
            $rendererArgs['usePwdStrengthMeter'] = (isset($modVars['use_password_strength_meter']) && !empty($modVars['use_password_strength_meter'])) ? $modVars['use_password_strength_meter'] : array();
            $rendererArgs['usePwdStrengthMeter'] = (isset($modVars['use_password_strength_meter']) && !empty($modVars['use_password_strength_meter'])) ? $modVars['use_password_strength_meter'] : false;
            $rendererArgs['showProps'] = $profileModAvailable && isset($modVars['reg_optitems']) && $modVars['reg_optitems'];
            $rendererArgs['profileModName'] = $profileModName;
            $rendererArgs['antiSpamQuestion'] = (isset($modVars['reg_question']) && !empty($modVars['reg_question'])) ? $modVars['reg_question'] : '';
            $antiSpamSystemAnswer = (isset($modVars['reg_answer']) && !empty($modVars['reg_answer'])) ? $modVars['reg_answer'] : '';
            $rendererArgs['useAntiSpamQuestion'] = !empty($rendererArgs['antiSpamQuestion']) && !empty($antiSpamSystemAnswer);
        }

        return $this->view->add_core_data()
                          ->assign($rendererArgs)
                          ->fetch($template);
    }

    /**
     * Create a new user.
     *
     * Available Post Parameters:
     *
     * @return bool True if successful, false otherwise.
     */
    public function registerNewUser()
    {
        // check permisisons
        if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_READ)) {
            return LogUtil::registerPermissionError();
        }

        // get arguments
        $reginfo = FormUtil::getPassedValue('reginfo', null, 'POST');
        if (isset($reginfo['uname']) && !empty($reginfo['uname'])) {
            $reginfo['uname'] = mb_strtolower($reginfo['uname']);
        }
        if (isset($reginfo['email']) && !empty($reginfo['email'])) {
            $reginfo['email'] = mb_strtolower($reginfo['email']);
        }
        $reginfo['dynadata'] = FormUtil::getPassedValue('dynadata', array(), 'POST');

        $emailAgain = FormUtil::getPassedValue('emailagain', null, 'POST');
        $passwordAgain = FormUtil::getPassedValue('passagain', null, 'POST');
        $antiSpamUserAnswer = FormUtil::getPassedValue('antispamanswer', null, 'POST');

        if (!isset($reginfo['pass'])) {
            // Ensure set and empty for validation.
            $reginfo['pass'] = '';
        }

        $registrationErrors = ModUtil::apiFunc('Users', 'registration', 'getRegistrationErrors', array(
            'checkmode'         => 'new',
            'reginfo'           => $reginfo,
            'passagain'         => $passwordAgain,
            'emailagain'        => $emailAgain,
            'antispamanswer'    => $antiSpamUserAnswer,
        ));

        $validators = $this->notifyHooks('users.hook.user.validate.edit', $reginfo, null, array(), new Zikula_Collection_HookValidationProviders())->getData();

        if ($registrationErrors || $validators->hasErrors()) {
            SessionUtil::requireSession();
            SessionUtil::setVar('reginfo', $reginfo, 'Users_User_register', true, true);
            //SessionUtil::setVar('passagain', $passwordAgain, 'Users_User_register', true, true);
            SessionUtil::setVar('emailagain', $emailAgain, 'Users_User_register', true, true);
            SessionUtil::setVar('registrationErrors', $registrationErrors, 'Users_User_register', true, true);

            return System::redirect(ModUtil::url('Users', 'user', 'register'));
        }

        $currentUserEmail = UserUtil::getVar('email');
        $adminNotifyEmail = $this->getVar('reg_notifyemail', '');
        $adminNotification = (strtolower($currentUserEmail) != strtolower($adminNotifyEmail));

        $registeredObj = ModUtil::apiFunc('Users', 'registration', 'registerNewUser', array(
            'reginfo'           => $reginfo,
            'usernotification'  => true,
            'adminnotification' => true
        ));

        if ($registeredObj) {
            $this->notifyHooks('users.hook.user.process.edit', $registeredObj, $registeredObj['uid']);
            if ($registeredObj['activated'] == UserUtil::ACTIVATED_PENDING_REG) {
                $moderation = $this->getVar('moderation');
                $moderationOrder = $this->getVar('moderation_order');
                $verifyEmail = $this->getVar('reg_verifyemail');

                if (count($registeredObj['regErrors']) > 0) {
                    LogUtil::registerStatus($this->__('Done! Your registration request has been saved. However, the following problems were detected during the registration process. Please contact the site administrator regarding the status of your registration request.'));
                    $this->view->assign('regErrors', $registeredObj['regErrors']);
                } else {
                    if ($moderation && ($verifyEmail != UserUtil::VERIFY_NO)) {
                        if ($moderationOrder == UserUtil::APPROVAL_AFTER) {
                            LogUtil::registerStatus($this->__('Done! Your registration request has been saved. Remember that your e-mail address must be verified and your request must be approved before you will be able to log in. Please check your e-mail for an e-mail address verification message. Your account will not be approved until after the verification process is completed.'));
                        } elseif ($moderationOrder == UserUtil::APPROVAL_BEFORE) {
                            LogUtil::registerStatus($this->__('Done! Your registration request has been saved. Remember that your request must be approved and your e-mail address must be verified before you will be able to log in. Please check your e-mail periodically for a message from us. You will receive a message after we have reviewed your request.'));
                        } else {
                            LogUtil::registerStatus($this->__('Done! Your registration request has been saved. Remember that your e-mail address must be verified and your request must be approved before you will be able to log in. Please check your e-mail for an e-mail address verification message.'));
                        }
                    } elseif ($moderation) {
                        LogUtil::registerStatus($this->__('Done! Your registration request has been saved. Remember that your request must be approved before you will be able to log in. Please check your e-mail periodically for a message from us. You will receive a message after we have reviewed your request.'));
                    } elseif ($verifyEmail != UserUtil::VERIFY_NO) {
                        LogUtil::registerStatus($this->__('Done! Your registration request has been saved. Remember that your e-mail address must be verified before you will be able to log in. Please check your e-mail for an e-mail address verification message.'));
                    } else {
                        // Some unknown state! Should never get here, but just in case...
                        LogUtil::registerStatus($this->__('Done! Your registration request has been saved. Please contact the site administrator regarding the status of your registration request.'));
                    }
                }

                return $this->view->fetch('users_user_displaystatusmsg.tpl');
            } else {
                // Make sure the user has a status that allows him to log in before telling him he can.
                if (($registeredObj['activated'] == UserUtil::ACTIVATED_ACTIVE)
                        || ($registeredObj['activated'] == UserUtil::ACTIVATED_INACTIVE_PWD)
                        || ($registeredObj['activated'] == UserUtil::ACTIVATED_INACTIVE_TOUPP)
                        || ($registeredObj['activated'] == UserUtil::ACTIVATED_INACTIVE_PWD_TOUPP)) {
                    LogUtil::registerStatus($this->__('Done! Your account has been created and you may now log in.'));

                    // Shouldn't really get any of the following statuses out of the registration process, but cover all the bases.
                    if ($registeredObj['activated'] == UserUtil::ACTIVATED_INACTIVE_PWD) {
                        LogUtil::registerStatus($this->__('Note: Your first attempt to log in will be rejected, and you will be asked to establish a password.'));
                    } elseif ($registeredObj['activated'] == UserUtil::ACTIVATED_INACTIVE_TOUPP) {
                        LogUtil::registerStatus($this->__('Note: Your first attempt to log in will be rejected, and you will be asked to accept the site\'s terms.'));
                    } elseif ($registeredObj['activated'] == UserUtil::ACTIVATED_INACTIVE_PWD_TOUPP) {
                        LogUtil::registerStatus($this->__('Note: Your first attempt to log in will be rejected, and you will be asked to establish a password, and to accept the site\'s terms.'));
                    }

                    return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
                } else {
                    // Shouldn't really get here out of the registration process, but cover all the bases.
                    LogUtil::registerStatus($this->__('Done! Your account has been created.'));
                    $registeredObj['regErrors'][] = $this->__('Your account status will not permit you to log in at this time. Please contact the site administrator for more information.');
                    $this->view->assign('regErrors', $registeredObj['regErrors']);

                    return $this->view->fetch('users_user_displaystatusmsg.tpl');
                }
            }
        } else {
            LogUtil::registerError($this->__('Error! Could not create the new user account or registration application. Please check with a site administrator before re-registering.'));
            return $this->view->fetch('users_user_displaystatusmsg.tpl');
        }
    }

    /**
     * Display the lost user name / password choices.
     *
     * @return string The rendered template.
     */
    public function lostPwdUname()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        return $this->view->fetch('users_user_lostpwduname.tpl');
    }

    /**
     * Display the lost user name form.
     *
     * @return string The rendered template.
     */
    public function lostUname()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        return $this->view->fetch('users_user_lostuname.tpl');
    }

    /**
     * Send the user a lost uname.
     *
     * Available Post Parameters:
     * - email (string) The user's e-mail address.
     * - code  (string) The confirmation code.
     *
     * @return bool True if successful request or expected error, false if unexpected error.
     */
    public function mailUname()
    {
        $emailMessageSent = false;

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostUname'));
        }

        $email = FormUtil::getPassedValue('email', null, 'POST');

        SessionUtil::requireSession();
        SessionUtil::delVar('lostuname_email');

        if (empty($email)) {
            LogUtil::registerError($this->__('Error! E-mail address field is empty.'));
        } else {
            // save username and password for redisplay
            SessionUtil::setVar('lostuname_email', $email);

            $emailMessageSent = ModUtil::apiFunc('Users', 'user', 'mailUname', array(
                'idfield' => 'email',
                'id' => $email
                ));
        }

        if ($emailMessageSent) {
            SessionUtil::delVar('lostuname_email');
            return LogUtil::registerStatus($this->__f('Done! The user name for %s has been sent via e-mail.', $email), ModUtil::url('Users', 'user', 'loginScreen'));
        } else {
            return LogUtil::registerError($this->__('Sorry! We are unable to send a user name reminder for that e-mail address. Please contact an administrator.'), null, ModUtil::url('Users', 'user', 'lostUname'));
        }
    }

    /**
     * Display the lost password form.
     *
     * @return string The rendered template.
     */
    public function lostPassword()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        return $this->view->fetch('users_user_lostpassword.tpl');
    }

    /**
     * Send the user a confirmation code in order to reset a lost password.
     *
     * Available Post Parameters:
     * - uname (string) The user's user name.
     * - email (string) The user's e-mail address.
     * - code  (string) The confirmation code.
     *
     * @return bool True if successful request or expected error, false if unexpected error.
     */
    public function mailConfirmationCode()
    {
        $emailMessageSent = false;

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostPassword'));
        }

        $uname = FormUtil::getPassedValue('uname', null, 'POST');
        $email = FormUtil::getPassedValue('email', null, 'POST');

        SessionUtil::requireSession();
        SessionUtil::delVar('lostpassword_uname');
        SessionUtil::delVar('lostpassword_email');

        if (empty($uname) && empty($email)) {
            LogUtil::registerError($this->__('Error! User name and e-mail address fields are empty.'));
        } elseif (!empty($email) && !empty($uname)) {
            LogUtil::registerError($this->__('Error! Please enter either a user name OR an e-mail address, but not both of them.'));
        } else {
            if (!empty($uname)) {
                $idfield = 'uname';
                $idvalue = $uname;
                // save username for redisplay
                SessionUtil::setVar('lostpassword_uname', $uname);
            } else {
                $idfield = 'email';
                $idvalue = $email;
                // save email for redisplay
                SessionUtil::setVar('lostpassword_email', $email);
            }
            $emailMessageSent = ModUtil::apiFunc('Users', 'user', 'mailConfirmationCode', array(
                'idfield' => $idfield,
                'id' => $idvalue
                ));
        }

        // save username and password for redisplay
        SessionUtil::setVar('lostpassword_email', $email);

        if ($emailMessageSent) {
            return LogUtil::registerStatus($this->__f('Done! The confirmation code for %s has been sent via e-mail.', $idvalue), ModUtil::url('Users', 'user', 'lostPasswordCode'));
        } else {
            if ($idfield == 'email') {
                $errorMessage = $this->__('Sorry! We are unable to send a password recovery code for that e-mail address. Please try your user name, or contact an administrator.');
            } else {
                $errorMessage = $this->__('Sorry! We are unable to send a password recovery code for that user name. Please try your e-mail address, contact an administrator.');
            }
            return LogUtil::registerError($errorMessage, null, ModUtil::url('Users', 'user', 'lostPassword'));
        }
    }

    /**
     * Display the lost password confirmation code entry form.
     *
     * @return string The rendered template.
     */
    public function lostPasswordCode()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        $uname = FormUtil::getPassedValue('uname', null, 'GET');
        $email = FormUtil::getPassedValue('email', null, 'GET');
        $code  = FormUtil::getPassedValue('code',  null, 'GET');

        if (!isset($uname)) {
            $uname = SessionUtil::getVar('lostpassword_uname', null);
        }
        if (!isset($email) && (!isset($uname) || empty($uname))) {
            $email = SessionUtil::getVar('lostpassword_email', null);
        }
        if (!isset($code)) {
            $code = SessionUtil::getVar('lostpassword_code', null);
        }

        return $this->view->assign('lostpassword_uname', $uname)
                          ->assign('lostpassword_email', $email)
                          ->assign('lostpassword_code', $code)
                          ->fetch('users_user_lostpasswordcode.tpl');
    }

    /**
     * Show the user his password reminder.
     *
     * Available Post Parameters:
     * - uname (string) The user's user name.
     * - email (string) The user's e-mail address.
     * - code  (string) The confirmation code.
     *
     * @return bool True if successful request or expected error, false if unexpected error.
     */
    public function passwordReminder()
    {
        $emailMessageSent = false;

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostPasswordCode'));
        }

        $uname = FormUtil::getPassedValue('uname', null, 'GETPOST');
        $email = FormUtil::getPassedValue('email', null, 'GETPOST');
        $code  = FormUtil::getPassedValue('code',  null, 'GETPOST');

        SessionUtil::requireSession();
        SessionUtil::delVar('lostpassword_uname');
        SessionUtil::delVar('lostpassword_email');
        SessionUtil::delVar('lostpassword_code');

        if (empty($uname) && empty($email)) {
            LogUtil::registerError($this->__('Error! User name and e-mail address fields are empty.'));
        } elseif (!empty($email) && !empty($uname)) {
            LogUtil::registerError($this->__('Error! Please enter either a user name OR an e-mail address, but not both of them.'));
        } else {
            if (!empty($uname)) {
                $idfield = 'uname';
                $idvalue = $uname;
                // save username for redisplay
                SessionUtil::setVar('lostpassword_uname', $uname);
            } else {
                $idfield = 'email';
                $idvalue = $email;
                // save email for redisplay
                SessionUtil::setVar('lostpassword_email', $email);
            }

            $checkConfArgs =array(
                'idfield' => $idfield,
                'id'      => $idvalue,
                'code'    => $code,
            );
            if (ModUtil::apiFunc('Users', 'user', 'checkConfirmationCode', $checkConfArgs)) {
                $userInfo = UserUtil::getVars($idvalue, true, $idfield);
                $passwordReminder = $userInfo['passreminder'];
            } else {
                LogUtil::registerError($this->__("Error! The code that you've enter is invalid."));
            }
        }

        if (!isset($userInfo)) {
            // $userInfo is not set, so there was an error prior to an attempt to get the user.

            // save username and password for redisplay
            SessionUtil::setVar('lostpassword_uname', $uname);
            SessionUtil::setVar('lostpassword_email', $email);
            SessionUtil::setVar('lostpassword_code',  $code);

            return System::redirect(ModUtil::url('Users', 'user', 'lostPasswordCode'));
        } elseif (isset($userInfo) && !$userInfo) {
            // $userInfo is set, but false. There was a database error retrieving the user.
            return System::redirect(ModUtil::url('Users', 'user', 'lostPassword'));
        } else {
            // $userInfo is set, and not false, and $passwordReminder is available. Show it.
            return $this->view->assign('lostpassword_uname', $userInfo['uname'])
                              ->assign('passreminder', $passwordReminder)
                              ->assign('lostpassword_code', $code)
                              ->fetch('users_user_passwordreminder.tpl');
        }
    }

    /**
     * Render and process a password-reset, showing the password reminder if available.
     *
     * This function, as a result of successfully providing a verification code, will display
     * to the user his user name and password reminder, and give him the opportunity to reset his
     * password.
     *
     * @return string|bool The rendered template; true on redirect; false on error.
     */
    public function resetPassword()
    {
        if (!SecurityUtil::confirmAuthKey('Users', 'passwordresetauthid')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostPwdUname'));
        }

        $uname = FormUtil::getPassedValue('lostpassword_uname', '', 'GETPOST');

        $userinfo = UserUtil::getVars($uname);

        if ($userinfo) {
            $newpass = FormUtil::getPassedValue('newpass', '', 'POST');
            $newpassagain = FormUtil::getPassedValue('newpassagain', '', 'POST');
            $newpassreminder = FormUtil::getPassedValue('newpassreminder', '', 'POST');

            $passwordErrors = ModUtil::apiFunc('Users', 'registration', 'getPasswordErrors', array(
                'uname'         => $uname,
                'pass'          => $newpass,
                'passagain'     => $newpassagain,
                'passreminder'  => $newpassreminder,
            ));

            if (empty($passwordErrors)) {
                $passwordSet = UserUtil::setPassword($newpass, $userinfo['uid']);

                if ($passwordSet) {
                    $reminderSet = UserUtil::setVar('passreminder', $newpassreminder, $userinfo['uid']);

                    if (!$reminderSet) {
                        return LogUtil::registerError($this->__('Warning! Your new password has been saved, but there was an error while trying to save your new password reminder.'), null,
                                                      ModUtil::url('Users', 'user', 'loginScreen'));
                    } else {
                        return LogUtil::registerStatus($this->__('Done! Your password has been reset, and you may now log in. Please keep your password in a safe place!'),
                                                       ModUtil::url('Users', 'user', 'loginScreen'));
                    }
                } else {
                    return LogUtil::registerError($this->__('Error! Your new password could not be saved.'), null,
                                                  ModUtil::url('Users', 'user', 'lostPwdUname'));
                }
            }
        } else {
            return LogUtil::registerError($this->__('Sorry! Could not load that user account.'), null,
                                          ModUtil::url('Users', 'user', 'lostPwdUname'));
        }

        if (isset($passwordErrors) && !empty($passwordErrors)) {
            $errorInfo = ModUtil::apiFunc('Users', 'user', 'processRegistrationErrorsForDisplay', array('registrationErrors' => $passwordErrors));
        } else {
            $errorInfo = array();
        }
        $rendererArgs = array(
            'lostpassword_uname' => $uname,
            'passreminder'       => isset($userinfo['passreminder']) ? $userinfo['passreminder'] : '',
            'newpassreminder'    => isset($newpassreminder) ? $newpassreminder : '',
            'errormessages'      => (isset($errorInfo['errorMessages']) && !empty($errorInfo['errorMessages'])) ? $errorInfo['errorMessages'] : array(),
        );

        return $this->view->assign($rendererArgs)
                          ->fetch('users_user_passwordreminder.tpl');
    }

    /**
     * Login a user.
     *
     * If the user is already logged in, then he is redirected to the main user function.
     * If a redirect URL is specified, then the user is redirected to that page upon
     * successful login.
     *
     * NOTE TO DEVELOPERS: Do not assume that the Users module will be the module that authenticates the
     * user name (or email or whatever) and password! This function must rely on UserUtil and its
     * dispatching of authentication to the proper authmodule!
     *
     * @return bool True on successful login, otherwise false.
     */
    public function login()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        // We shouldn't get here unless we came through the Users UI
        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users','user','loginScreen'));
        }

        if (System::serverGetVar('REQUEST_METHOD', false) == 'POST') {
            // Get the authinfo array structure, whatever that may be (usually--but does not have to be--loginid and pass)
            $authinfo = FormUtil::getPassedValue('authinfo', array(), 'POST');
            // Get the name of the module that will do the actual authentication of the user
            $authModuleName = FormUtil::getPassedValue('authmodule', 'Users', 'POST');
            // Get a few other things having to do with logging in
            $returnPageUrl = FormUtil::getPassedValue('url', '', 'POST');
            $rememberMe = FormUtil::getPassedValue('rememberme', '', 'POST');
        } else {
            $reentrantState = SessionUtil::getVar('Users_User_login', array(), '/', false, false);
            if (empty($authinfo) && isset($reentrantState) && !empty($reentrantState)) {
                // We are reentering the function, likely after redirecting out to an external auth server like OpenID
                // TODO - Do we need to set a timestamp and check for stale data?
                $authinfo       = $reentrantState['authinfo'];
                $authModuleName = $reentrantState['authmodule'];
                $returnPageUrl  = $reentrantState['url'];
                $rememberMe     = $reentrantState['rememberme'];
                SessionUtil::delVar('Users_User_login');
            }
        }

        if (isset($authinfo) && !is_array($authinfo)) {
            return LogUtil::registerError($this->__('Error! Invalid authentication information.'), null, System::getHomepageUrl());
        }

        if (empty($authModuleName)) {
            $authModuleName = 'Users';
        }

        $tryAgain = false;
        $errorMsg = '';

        // ATTENTION: authenticateUser requires that this function be reentrant!
        SessionUtil::requireSession();
        SessionUtil::setVar('authinfo', $authinfo, '/Users_User_login', true, true);
        SessionUtil::setVar('authmodule', $authModuleName, '/Users_User_login', true, true);
        SessionUtil::setVar('url', $returnPageUrl, '/Users_User_login', true, true);
        SessionUtil::setVar('rememberme', $rememberMe, '/Users_User_login', true, true);
        $reentrantURL = System::getBaseUrl() . ModUtil::url('Users', 'user', 'login', array('authid' => SecurityUtil::generateAuthKey('Users')));
        // Just check the password. Do not log in yet. Why? So we can deal with forced password changes and
        // terms/privacy policy accept statuses, but only if the user has given us good login information.
        $authenticatedUid = ModUtil::apiFunc($authModuleName, 'auth', 'authenticateUser', array(
            'authinfo'      => $authinfo,
            'reentrant_url' => $reentrantURL,
        ));

        // If we get to this point, then we did not redirect out to an external auth server,
        // so clear the reentrant state
        SessionUtil::delVar('Users_User_login');

        if (!$authenticatedUid || !is_numeric($authenticatedUid)) {
            // Error message set in authenticateUser.
            $tryAgain = true;
        } else {
            $userObj = UserUtil::getVars($authenticatedUid);

            if (!$userObj) {
                // TODO - This section of code and the similar section in UserUtil::login need to be reconciled.

                // Either the authenticatedUid is a registration, or something has gone horribly and unpredictably wrong.
                // Try to get a registration with that uid.
                $userObj = UserUtil::getVars($authenticatedUid, false, 'uid', true);
                if ($userObj) {
                    // The authenticated uid points to a registration. Let's handle returing the proper message at this point.
                    $errorMsg = '';
                    $loginDisplayApproval = $this->getVar('login_displayapproval', false);
                    $loginDisplayVerify = $this->getVar('login_displayverify', false);
                    $moderationOrder = $this->getVar('moseration_order', UserUtil::APPROVAL_BEFORE);

                    if ($moderationOrder == UserUtil::APPROVAL_AFTER) {
                        if (!$userObj['isverified'] && $loginDisplayVerify) {
                            if (empty($userObj['approved_by'])) {
                                $errorMsg = $this->__("Sorry! Your e-mail address must be verified before your resigration request can be approved. Check for an e-mail message containing verification instructions. If you need another verification e-mail sent, contact an administrator.");
                            } else {
                                $errorMsg = $this->__("Sorry! Your e-mail address must be verified before you can log in. Check for an e-mail message containing verification instructions. If you need another verification e-mail sent, contact an administrator.");
                            }
                        } elseif (empty($userObj['approved_by']) && $loginDisplayApproval) {
                            $errorMsg = $this->__("Sorry! Your account is still awaiting administrator approval. An e-mail message will be sent to you once an administrator has reviewed your registration request.");
                        }
                    } else {
                        if (empty($userObj['approved_by']) && $loginDisplayApproval) {
                            $errorMsg = $this->__("Sorry! Your account is still awaiting administrator approval. An e-mail message will be sent to you once an administrator has reviewed your registration request.");
                        } elseif (!$userObj['isverified'] && $loginDisplayVerify) {
                            $errorMsg = $this->__("Sorry! Your e-mail address must be verified before you can log in. Check for an e-mail message containing verification instructions. If you need another verification e-mail sent, contact an administrator.");
                        }
                    }

                    if (empty($errorMsg) && ($loginDisplayApproval || $loginDisplayVerify)) {
                        $errorMsg = $this->__("Sorry! Your registration status is still pending.");
                    }

                    if (!empty($errorMsg)) {
                        // No chance of logging in successfully (uname/password was correct, but status will prevent)
                        $event = new Zikula_Event('user.login.failed', null, array(
                            'authmodule'    => $authModuleName,
                            'loginid'       => isset($authinfo['loginid']) ? $authinfo['loginid'] : '',
                        ));
                        EventUtil::notify($event);
                        LogUtil::registerError($errorMsg);
                        return $this->view->fetch('users_user_displaystatusmsg.tpl');
                    } else {
                        // Get a generic message and redisplay the login form
                        $tryAgain = true;
                    }
                } else {
                    // We got an authenticatedUid, but it is neither a user record nor a registration record. Something horribly wrong
                    // happened somewhere.
                    //$errorMsg = $this->__('Sorry! Either there is no active user in our system with that information, or the information you provided does not match the information for your account. Please correct your entry and try again.');
                    $tryAgain = true;
                }
            } else {
                // Remember that we are not actually logging in here. We are, instead, intercepting based on a few
                // statuses in order to do some UI stuff before the actual login.
                // $userStatus == UserUtil::ACTIVATED_INACTIVE is handled in UserUtil::loginUsing(), where the login actually happens.
                // We really only need to deal with ACTIVATED_INACTIVE_TOUPP, ACTIVATED_INACTIVE_PWD, and ACTIVATED_INACTIVE_PWD_TOUPP
                // here, since those are things for the UI to deal with
                $userStatus = isset($userObj['activated']) ? $userObj['activated'] : UserUtil::ACTIVATED_INACTIVE;

                // Check for activated statuses that mean that the user has no chance of logging in.
                // TODO - This section of code and the similar section in UserUtil::login need to be reconciled.
                if (($userStatus == UserUtil::ACTIVATED_INACTIVE) || ($userStatus == UserUtil::ACTIVATED_PENDING_DELETE)) {
                    if (($userStatus == UserUtil::ACTIVATED_INACTIVE) && $this->getVar('login_displayinactive', false)) {
                        $errorMsg = $this->__('Sorry! Your account is not active. Please contact a site administrator.');
                    } elseif (($userStatus == UserUtil::ACTIVATED_PENDING_DELETE) && $this->getVar('login_displaymarkeddel', false)) {
                        $errorMsg = $this->__('Sorry! Your account is marked to be permanently closed. Please contact a site administrator.');
                    }

                    if (!empty($errorMsg)) {
                        // No chance of logging in successfully (uname/password was correct, but status will prevent)
                        $event = new Zikula_Event('user.login.failed', null, array(
                            'authmodule'    => $authModuleName,
                            'loginid'       => isset($authinfo['loginid']) ? $authinfo['loginid'] : '',
                        ));
                        EventUtil::notify($event);
                        LogUtil::registerError($errorMsg);
                        return $this->view->fetch('users_user_displaystatusmsg.tpl');
                    } else {
                        // Get a generic message and redisplay the login form.
                        $tryAgain = true;
                    }
                }

                // The status to accept terms and/or privacy policy happens no matter what authmodule is used for this login.
                $mustConfirmTOUPP = ($userStatus == UserUtil::ACTIVATED_INACTIVE_TOUPP) || ($userStatus == UserUtil::ACTIVATED_INACTIVE_PWD_TOUPP);
                // The status to force a password change only happens if the current authmodule is 'Users', but we need to know the
                // status separately from whether it has to happen right now.
                $mustChangePassword = ($userStatus == UserUtil::ACTIVATED_INACTIVE_PWD) || ($userStatus == UserUtil::ACTIVATED_INACTIVE_PWD_TOUPP);
                $mustChangePasswordRightNow = ($authModuleName == 'Users') && $mustChangePassword;

                if ($mustConfirmTOUPP || $mustChangePasswordRightNow) {
                    // There is something about handling TOU/PP confirmation and forced password change in UserUtil::loginUsing() too.
                    // That stuff is to catch logins that happen without going through this function. This is where it is really
                    // handled.
                    if ($mustConfirmTOUPP) {
                        if (ModUtil::available('Legal')
                                && (ModUtil::getVar('Legal', 'termsofuse', true) || ModUtil::getVar('Legal', 'privacypolicy', true))) {

                            $touppAccepted = (int)FormUtil::getPassedValue('touaccepted', 0, 'GETPOST');
                            $mustConfirmTOUPP = !$touppAccepted;
                            $tryAgain = !$touppAccepted;
                        } else {
                            $mustConfirmTOUPP = false;

                            if ($mustChangePassword) {
                                $userObj['activated'] = UserUtil::ACTIVATED_INACTIVE_PWD;
                            } else {
                                $userObj['activated'] = UserUtil::ACTIVATED_ACTIVE;
                            }
                            UserUtil::setVar('activated', $userObj['activated'], $userObj['uid']);
                        }
                    }

                    if ($mustChangePasswordRightNow) {
                        // See if we are returning back here with a new password
                        $newPasswordIsValid = true;
                        $newPassword      = FormUtil::getPassedValue('newpass', null, 'POST');
                        $newPasswordAgain = FormUtil::getPassedValue('confirmnewpass', null, 'POST');
                        $passwordReminder = FormUtil::getPassedValue('passreminder', '', 'POST');

                        // checks if the new password is valid
                        // TODO - Shouldn't this be the same set of checks as getRegistrationErrors?!

                        // the new password must be different from the current password
                        if ($authinfo['pass'] == $newPassword) {
                            $errorMsg = $this->__('Sorry! The new and the current passwords must be different. Please correct your entries and try again.');
                            $newPasswordIsValid = false;
                        }

                        // check if the new password satisfy the requirements
                        if ($newPasswordIsValid && empty($newPassword)) {
                            $newPasswordIsValid = false;
                        }

                        $minPasswordLength = $this->getVar('minpass');
                        if ($newPasswordIsValid && (strlen($newPassword) < $minPasswordLength)) {
                            $errorMsg = $this->_fn('Your password must be at least %s character long.', 'Your password must be at least %s characters long.', $minPasswordLength, $minPasswordLength);
                            $newPasswordIsValid = false;
                        }

                        if ($newPasswordIsValid && ($newPassword != $newPasswordAgain)) {
                            $errorMsg = $this->__('Sorry! The two passwords you entered do not match. Please correct your entries and try again.');
                            $newPasswordIsValid = false;
                        }

                        if ($newPasswordIsValid && empty($passwordReminder)) {
                            $errorMsg = $this->__('Sorry! You must provide a new password reminder word or phrase.');
                            $newPasswordIsValid = false;
                        }

                        // true if user password change is incorrect
                        $mustChangePassword = !$newPasswordIsValid;
                        $mustChangePasswordRightNow = !$newPasswordIsValid;
                        $tryAgain = !$newPasswordIsValid;
                    }

                    // If tryAgain is still true, then the user did not complete some of the necessary things on the
                    // last time through loginScreen, or he did, but incorrectly.
                    if ($tryAgain) {
                        if ($mustConfirmTOUPP && $mustChangePasswordRightNow) {
                            $errorMsg = $this->__('Your log-in request was not completed because you must agree to our terms, and must also change your account\'s password first.');
                        } elseif ($mustConfirmTOUPP) {
                            $errorMsg = $this->__('Your log-in request was not completed because you must agree to our terms first.');
                        } elseif ($mustChangePasswordRightNow) {
                            $errorMsg = $this->__('Your log-in request was not completed because you must change your account\'s password first.');
                        }
                    } else {
                        // If $tryAgain is false at this point, then the user has satisfied all of the requirements for either
                        // accepting the tou and/or pp, for changing his password, or both--or has not changed his password.

                        if (($userStatus == UserUtil::ACTIVATED_INACTIVE_PWD) || ($userStatus == UserUtil::ACTIVATED_INACTIVE_PWD_TOUPP)) {
                            // change the user's password
                            UserUtil::setPassword($newPassword, $userObj['uid']);
                            UserUtil::setVar('passreminder', $passwordReminder, $userObj['uid']);

                            // We just changed the password, but the user is not logged in yet, so
                            // we have to make sure they can actually log in below
                            $authinfo['pass'] = $newPassword;
                        }

                        if ($userStatus != UserUtil::ACTIVATED_INACTIVE_PWD) {
                            if ($userStatus == UserUtil::ACTIVATED_INACTIVE_PWD_TOUPP) {
                                $userStatus = UserUtil::ACTIVATED_INACTIVE_PWD;
                            } else {
                                $userStatus = UserUtil::ACTIVATED_ACTIVE;
                            }
                            $userObj['activated'] = $userStatus;
                            UserUtil::setVar('activated', $userStatus, $userObj['uid']);
                        }
                    }
                }
            }
        }

        if ($tryAgain) {
            // $tryAgain is true, so there was a problem of some sort. Either the authinfo was bad, or
            // the user has to complete something in order to log in (like accepting the terms, or changing
            // his password)
            if (empty($errorMsg) && !LogUtil::hasErrors()) {
                $errorMsg = $this->__('Sorry! Either there is no active user in our system with that information, or the information you provided does not match the information for your account. Please correct your entry and try again.');
            }

            $callbackURL = ModUtil::url('Users','user','loginScreen', array(
                'confirmtou'    => $mustConfirmTOUPP,
                'changepassword'=> $mustChangePassword,
                'returnpage'    => $returnPageUrl,
            ));
            if (!empty($errorMsg)) {
                return LogUtil::registerError($errorMsg , 403, $callbackURL);
            } else {
                return System::redirect($callbackURL);
            }
        } else {
            // Finally, here we actually log in. Note that the UserUtil::loginUsing() function is called here with the
            // $checkPassword parameter set to false. This is because we already authenticated the user above. If the
            // authmodule is one that redirects to an external server for authorization (e.g., OpenID, Facebook Connect,
            // etc.) then checking the password in loginUsing() would potentially cause a second call out to that
            // external server requiring the user to re-authorize. Since we don't want the user to have to authorize
            // or authenticate twice, we'll rely on the earlier authentication.
            $loggedIn = UserUtil::loginUsing($authModuleName, $authinfo, $rememberMe, null, false, $authenticatedUid);

            if ($loggedIn) {
                // start login event
                $uid = UserUtil::getVar('uid');
                $loginRedirect = $this->getVar('login_redirect');
                if ($loginRedirect == 1) {
                    // WCAG compliant login
                    return System::redirect($returnPageUrl);
                } else {
                    // meta refresh
                    $this->printRedirectPage($this->__('You are being logged-in. Please wait...'), $returnPageUrl);
                }
                return true;
            } else {
                // We really shouldn't get here since the authinfo was already authenticated.  Just in case...
                if (!LogUtil::hasErrors()) {
                    LoginUtil::registerError($this->__('Sorry! Either there is no active user in our system with that information, or the information you provided does not match the information for your account. Please correct your entry and try again.'));
                }
                return System::redirect(ModUtil::url('Users','user','loginScreen', array('returnpage' => urlencode($returnPageUrl))));
            }
        }
    }

    /**
     * Log a user out.
     *
     * The user is redirected to the entry point of the site, or to a redirect
     * page if specified in the site configuration.
     *
     * @return bool True (whether successfully logged out or not.)
     */
    public function logout()
    {
        $login_redirect = $this->getVar('login_redirect');

        // start logout event
        $uid = UserUtil::getVar('uid');
        if (UserUtil::logout()) {
            if ($login_redirect == 1) {
                // WCAG compliant logout - we redirect to index.php because
                // we might no have the permission for the recent site any longer
                return System::redirect(System::getHomepageUrl());
            } else {
                // meta refresh
                $this->printRedirectPage($this->__('Done! You have been logged out.'));
            }
        } else {
            LogUtil::registerError($this->__('Error! You have not been logged out.'));
            return System::redirect(System::getHomepageUrl());
        }

        return true;
    }

    /**
     * Render and process a registration e-mail verification code.
     *
     * This function will render and display to the user a form allowing him to enter
     * a verification code sent to him as part of the registration process. If the user's
     * registration does not have a password set (e.g., if an admin created the registration),
     * then he is prompted for it at this time. This function also processes the results of
     * that form, setting the registration record to verified (if appropriate), saving the password
     * (if provided) and if the registration record is also approved (or does not require it)
     * then a new user account is created.
     *
     * @return string|bool The rendered template; true on redirect; false on error.
     */
    public function verifyRegistration()
    {
        if (UserUtil::isLoggedIn()) {
            return LogUtil::registerError($this->__('Sorry! An account cannot be verified while you are logged in.'),
                ModUtil::url('Users', 'user', 'main'));
        }

        $uname = FormUtil::getPassedValue('uname', '', 'GETPOST');
        if ($uname) {
            $uname = mb_strtolower($uname);
        }
        $verifycode = FormUtil::getPassedValue('verifycode', '', 'GETPOST');
        $setPass = false;

        if ($uname) {
            $reginfo = ModUtil::apiFunc('Users', 'registration', 'get', array('uname' => $uname));

            if ($reginfo) {
                if (!isset($reginfo['pass']) || empty($reginfo['pass'])) {
                    $setPass = true;

                    if (SecurityUtil::confirmAuthKey('Users', 'verifyauthid')) {
                        // Special authid verified, so we can process the form.
                        $newpass = FormUtil::getPassedValue('newpass', '', 'POST');
                        $newpassagain = FormUtil::getPassedValue('newpassagain', '', 'POST');
                        $newpassreminder = FormUtil::getPassedValue('newpassreminder', '', 'POST');

                        $passwordErrors = ModUtil::apiFunc('Users', 'registration', 'getPasswordErrors', array(
                            'uname'         => $uname,
                            'pass'          => $newpass,
                            'passagain'     => $newpassagain,
                            'passreminder'  => $newpassreminder,
                        ));

                        if (empty($passwordErrors)) {
                            $newpassHash = UserUtil::getHashedPassword($newpass);;
                            $passSaved = UserUtil::setVar('pass', $newpassHash, $reginfo['uid']);
                            if (!$passSaved) {
                                LogUtil::registerError($this->__('Sorry! There was an error while trying to save your new password and reminder.'));
                            } else {
                                $reginfo['pass'] = $newpassHash;
                            }

                            $passReminderSaved = UserUtil::setVar('passreminder', $newpassreminder, $reginfo['uid']);
                            if (!$passReminderSaved) {
                                LogUtil::registerError($this->__('Sorry! There was an error while trying to save your new password and reminder.'));
                            } else {
                                $reginfo['passreminder'] = $newpassreminder;
                            }
                        }
                    }
                }

                if ($verifycode && $reginfo && isset($reginfo['pass']) && !empty($reginfo['pass'])
                        && isset($reginfo['passreminder']) && !empty($reginfo['passreminder'])) {

                    $verifyChg = ModUtil::apiFunc('Users', 'registration', 'getVerificationCode', array(
                        'uid'   => $reginfo['uid'],
                    ));

                    if ($verifyChg) {
                        $codesMatch = UserUtil::passwordsMatch($verifycode, $verifyChg['verifycode']);

                        if ($codesMatch) {
                            $verified = ModUtil::apiFunc('Users', 'registration', 'verify', array('reginfo' => $reginfo));

                            if ($verified) {

                                if (isset($verified['regErrors']) && count($verified['regErrors']) > 0) {
                                    $regErrorsMessage = $this->__('There were some problems detected during the verification process. Please contact the site administrator regarding the status of your verification.');
                                    $this->view->assign('regErrors', $verified['regErrors']);
                                }

                                switch ($verified['activated']) {
                                    case UserUtil::ACTIVATED_PENDING_REG:
                                        if (empty($verified['approved_by'])) {
                                            $message = $this->__('Done! Your account has been verified, and is awaiting administrator approval.');
                                        } else {
                                            $message = $this->__('Done! Your account has been verified. Your registration request is still pending completion. Please contact the site administrator for more information.');
                                        }
                                        LogUtil::registerStatus($message);
                                        if (isset($verified['regErrors']) && count($verified['regErrors']) > 0) {
                                            LogUtil::registerStatus($regErrorsMessage);
                                        }
                                        return $this->view->fetch('users_user_displaystatusmsg.tpl');
                                        break;
                                    case UserUtil::ACTIVATED_INACTIVE_PWD:
                                        LogUtil::registerStatus($this->__('Done! Your account has been verified. You may now log in with your user name and password.'));
                                        LogUtil::registerStatus($this->__('NOTE: During your first attempt to log in you will be asked to establish a new password.'));
                                        if (isset($verified['regErrors']) && count($verified['regErrors']) > 0) {
                                            LogUtil::registerStatus($regErrorsMessage);
                                            return $this->view->fetch('users_user_displaystatusmsg.tpl');
                                        } else {
                                            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
                                        }
                                        break;
                                    case UserUtil::ACTIVATED_INACTIVE_TOUPP:
                                        LogUtil::registerStatus($this->__('Done! Your account has been verified. You may now log in with your user name and password.'));
                                        LogUtil::registerStatus($this->__('NOTE: During your first attempt to log in you will be asked to accept the site\'s terms.'));
                                        if (isset($verified['regErrors']) && count($verified['regErrors']) > 0) {
                                            LogUtil::registerStatus($regErrorsMessage);
                                            return $this->view->fetch('users_user_displaystatusmsg.tpl');
                                        } else {
                                            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
                                        }
                                        break;
                                    case UserUtil::ACTIVATED_INACTIVE_PWD_TOUPP:
                                        LogUtil::registerStatus($this->__('Done! Your account has been verified. You may now log in with your user name and password.'));
                                        LogUtil::registerStatus($this->__('NOTE: During your first attempt to log in you will be asked to establish a new password, and to accept the site\'s terms.'));
                                        if (isset($verified['regErrors']) && count($verified['regErrors']) > 0) {
                                            LogUtil::registerStatus($regErrorsMessage);
                                            return $this->view->fetch('users_user_displaystatusmsg.tpl');
                                        } else {
                                            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
                                        }
                                        break;
                                    case UserUtil::ACTIVATED_ACTIVE:
                                        LogUtil::registerStatus($this->__('Done! Your account has been verified. You may now log in with your user name and password.'));
                                        if (isset($verified['regErrors']) && count($verified['regErrors']) > 0) {
                                            LogUtil::registerStatus($regErrorsMessage);
                                            return $this->view->fetch('users_user_displaystatusmsg.tpl');
                                        } else {
                                            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
                                        }
                                        break;
                                    default:
                                        LogUtil::registerStatus($this->__('Done! Your account has been verified.'));
                                        LogUtil::registerStatus($this->__('Your new account is not active yet. Please contact the site administrator for more information.'));
                                        if (isset($verified['regErrors']) && count($verified['regErrors']) > 0) {
                                            LogUtil::registerStatus($regErrorsMessage);
                                        }
                                        return $this->view->fetch('users_user_displaystatusmsg.tpl');
                                        break;
                                }
                            } else {
                                if (!LogUtil::hasErrors()) {
                                    return LogUtil::registerError($this->__('Sorry! There was an error while marking your registration as verifed. Please contact an administrator.'),
                                        ModUtil::url('Users', 'user', 'main'));
                                } else {
                                    return System::redirect(ModUtil::url('Users', 'user', 'main'));
                                }
                            }
                        } else {
                            LogUtil::registerError($this->__('Sorry! The verification code you provided does not match our records. Please check the code, and also check your e-mail for a newer verification code that might have been sent.'));
                        }
                    } elseif ($verifyChg === false) {
                        return LogUtil::registerError($this->__('Error! There was a problem retrieving the verification code for comparison.'));
                    } else {
                        return LogUtil::registerError($this->__f('Error! There is no pending verification code for \'%1$s\'. Please contact the site administrator.', array($reginfo['uname'])));
                    }
                }
                // No code, or no password. Pass down through to the template rendering.
            } else {
                LogUtil::registerError($this->__('Sorry! A registration does not exist for the user name you provided. Maybe your request has expired? Please check the user name, or contact an administrator.'));
            }
        }

        if (isset($passwordErrors) && !empty($passwordErrors)) {
            $errorInfo = ModUtil::apiFunc('Users', 'user', 'processRegistrationErrorsForDisplay', array('registrationErrors' => $passwordErrors));
        } else {
            $errorInfo = array();
        }
        $rendererArgs = array(
            'verify_uname'      => $uname,
            'verifycode'        => $verifycode,
            'reginfo'           => isset($reginfo) ? $reginfo : array(),
            'setpass'           => $setPass,
            'newpass'           => isset($newpass) ? $newpass : '',
            'newpassreminder'   => isset($newpassreminder) ? $newpassreminder : '',
            'errormessages'     => (isset($errorInfo['errorMessages']) && !empty($errorInfo['errorMessages'])) ? $errorInfo['errorMessages'] : array(),
        );

        $this->view->add_core_data();
        $this->view->assign($rendererArgs);
        return $this->view->fetch('users_user_verifyregistration.tpl');
    }

    /**
     * LEGACY user account activation.
     *
     * We must keep this function, because there is no way to know whether an inactive account
     * is inactive because it needs activation, or for some other reason set manually by the site admin.
     *
     * Available Get/Post Parameters;
     * - code (string) Confirmation/Activation code.
     *
     * @param array $args All parameters passed to this function.
     *                    $args['code'] (string) Used as a default if the get/post parameter 'code' is not set.
     *
     * @return bool True on success, otherwise false.
     */
    public function activation($args)
    {
        $code = base64_decode(FormUtil::getPassedValue('code', (isset($args['code']) ? $args['code'] : null), 'GETPOST'));
        $code = explode('#', $code);

        if (!isset($code[0]) || !isset($code[1])) {
            return LogUtil::registerError($this->__('Error! Could not activate your account. Please contact the site administrator.'));
        }
        $uid = $code[0];
        $code = $code[1];

        // Get user Regdate
        $regdate = UserUtil::getVar('user_regdate', $uid);

        // Checking length in case the date has been stripped from its space in the mail.
        if (strlen($code) == 18) {
            if (!strpos($code, ' ')) {
                $code = substr($code, 0, 10) . ' ' . substr($code, -8);
            }
        }

        if (hash('md5', $regdate) == hash('md5', $code)) {
            $returncode = ModUtil::apiFunc('Users', 'registration', 'activateUser',
                                       array('uid'     => $uid,
                                             'regdate' => $regdate));

            if (!$returncode) {
                return LogUtil::registerError($this->__('Error! Could not activate your account. Please contact the site administrator.'));
            }
            LogUtil::registerStatus($this->__('Done! Account activated.'));
            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
        } else {
            return LogUtil::registerError($this->__('Sorry! You entered an invalid confirmation code. Please correct your entry and try again.'));
        }
    }

    /**
     * Print a (legacy) login/logout redirect page. Internal use only, not intended to be called through the API.
     *
     * @param string $message The message to display on the redirect page.
     * @param string $url     The URL of the page to redirect to after this redirect page has been displayed.
     *
     * @access private
     *
     * @return bool True.
     */
    private function printRedirectPage($message, $url)
    {
        $url = (!isset($url) || empty($url)) ? System::getHomepageUrl() : $url;

        // check the url
        if (substr($url, 0, 1) == '/') {
            // Root-relative links
            $url = 'http'.(System::serverGetVar('HTTPS')=='on' ? 's' : '').'://'.System::serverGetVar('HTTP_HOST').$url;
        } elseif (!preg_match('!^(?:http|https):\/\/!', $url)) {
            // Removing leading slashes from redirect url
            $url = preg_replace('!^/*!', '', $url);
            // Get base URL and append it to our redirect url
            $baseurl = System::getBaseUrl();
            $url = $baseurl.$url;
        }

        $this->view->assign('ThemeSel', System::getVar('Default_Theme'))
                   ->assign('url', $url)
                   ->assign('message', $message)
                   ->assign('stylesheet', ThemeUtil::getModuleStylesheet('Users'))
                   ->assign('redirectmessage', $this->__('If you are not automatically re-directed then please click here.'))
                   ->display('users_user_redirectpage.tpl');

        return true;
    }

    /**
     * Log into a site that is currently "off" (normal logins are not allowed).
     *
     * Allows the administrator to access the site during maintenance.
     *
     * Available Post Parameters:
     * - user       (string) The user name of the user attempting to log in.
     * - pass       (string) The password of the user attempting to log in.
     * - rememberme (int)    Whether the login session should persist.
     *
     * @return bool True.
     */
    public function siteOffLogin()
    {
        // do not process if the site is enabled
        if (!System::getVar('siteoff', false)) {
            return System::redirect(System::getHomepageUrl());
        }

        $user = FormUtil::getPassedValue('user', null, 'POST');
        $pass = FormUtil::getPassedValue('pass', null, 'POST');
        $rememberme = FormUtil::getPassedValue('rememberme', false, 'POST');

        UserUtil::loginUsing('Users', array('loginid' => $user, 'pass' => $pass), $rememberme);

        if (!SecurityUtil::checkPermission('Settings::', 'SiteOff::', ACCESS_ADMIN)) {
            UserUtil::logout();
        }

        return System::redirect(System::getHomepageUrl());
    }

    /**
     * Display the configuration options for the users block.
     *
     * @return string The rendered template.
     */
    public function usersBlock()
    {
        $blocks = ModUtil::apiFunc('Blocks', 'user', 'getall');
        $mid = ModUtil::getIdFromName('Users');
        $found = false;
        foreach ($blocks as $block) {
            if ($block['mid'] == $mid && $block['bkey'] == 'user') {
                $found = true;
                break;
            }
        }

        if (!$found) {
            return LogUtil::registerPermissionError();
        }

        return $this->view->assign(UserUtil::getVars(UserUtil::getVar('uid')))
                          ->fetch('users_user_usersblock.tpl');
    }

    /**
     * Update the custom users block.
     *
     * Available Post Parameters:
     * - ublockon (int)   Whether the block is displayed or not.
     * - ublock   (mixed) ?.
     *
     * @return bool True on success, otherwise false.
     */
    public function updateUsersBlock()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        $blocks = ModUtil::apiFunc('Blocks', 'user', 'getall');
        $mid = ModUtil::getIdFromName('Users');
        $found = false;
        foreach ($blocks as $block) {
            if ($block['mid'] == $mid && $block['bkey'] == 'user') {
                $found = true;
                break;
            }
        }

        if (!$found) {
            return LogUtil::registerPermissionError();
        }

        $uid = UserUtil::getVar('uid');
        $ublockon = (bool)FormUtil::getPassedValue('ublockon', false, 'POST');
        $ublock = (string)FormUtil::getPassedValue('ublock', '', 'POST');

        UserUtil::setVar('ublockon', $ublockon);
        UserUtil::setVar('ublock', $ublock);

        LogUtil::registerStatus($this->__('Done! Saved custom block.'));
        return System::redirect(ModUtil::url('Users'));
    }

    /**
     * Display the change password form.
     *
     * @return string The rendered template.
     */
    public function changePassword()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        $changepassword = $this->getVar('changepassword', 1);
        if ($changepassword <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        $this->view->add_core_data();

        // Return the output that has been generated by this function
        return $this->view->fetch('users_user_changepassword.tpl');
    }

    /**
     * Update the user's password.
     *
     * Available Post Parameters:
     * - oldpassword        (string) The original password.
     * - newpassword        (string) The new password to be stored for the user.
     * - newpasswordconfirm (string) Verification of the new password to be stored for the user.
     *
     * @return bool True on success, otherwise false.
     */
    public function updatePassword()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'changePassword'));
        }

        $uservars = $this->getVars();
        if ($uservars['changepassword'] <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        $currentPassword    = FormUtil::getPassedValue('oldpassword', '', 'POST');
        $newPassword        = FormUtil::getPassedValue('newpassword', '', 'POST');
        $newPasswordAgain   = FormUtil::getPassedValue('newpasswordconfirm', '', 'POST');
        $newPasswordReminder= FormUtil::getPassedValue('passreminder', '', 'POST');

        $userObj = UserUtil::getVars(UserUtil::getVar('uid'), true);

        if (empty($currentPassword) || !UserUtil::passwordsMatch($currentPassword, $userObj['pass'])) {
            return LogUtil::registerError($this->__('Sorry! The current password you entered is not correct. Please correct your entry and try again.'),
                null, ModUtil::url('Users', 'user', 'changePassword'));
        }

        $passwordErrors = ModUtil::apiFunc('Users', 'registration', 'getPasswordErrors', array(
            'uname'         => $userObj['uname'],
            'pass'          => $newPassword,
            'passagain'     => $newPasswordAgain,
            'passreminder'  => $newPasswordReminder
        ));

        if (!empty($passwordErrors)) {
            foreach ($passwordErrors as $field => $errorList) {
                foreach ($errorList as $errorMessage) {
                    LogUtil::registerError($errorMessage);
                }
            }
            return System::redirect(ModUtil::url('Users', 'user', 'changePassword'));
        }

        // set the new password
        if (UserUtil::setPassword($newPassword)) {
            if (!UserUtil::setVar('passreminder', $newPasswordReminder)) {
                LogUtil::registerError($this->__('Warning! Your new password was saved, however there was a problem saving your new password reminder.'));
            }
        } else {
            LogUtil::registerError($this->__('Sorry! There was a problem saving your new password.'));
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        // Force reload of user vars
        $userObj = UserUtil::getVars(UserUtil::getVar('uid'), true);

        LogUtil::registerStatus($this->__('Done! Saved your new password.'));
        return System::redirect(ModUtil::url('Users', 'user', 'main'));
    }

    /**
     * Display the change email address form.
     *
     * @return string The rendered template.
     */
    public function changeEmail()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        $changeemail = $this->getVar('changeemail', 1);
        if ($changeemail <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        $this->view->add_core_data();

        // Return the output that has been generated by this function
        return $this->view->fetch('users_user_changeemail.tpl');
    }

    /**
     * Update the email address.
     *
     * Available Post Parameters:
     * - newemail (string) The new e-mail address to store for the user.
     *
     * @return bool True on success, otherwise false.
     */
    public function updateEmail()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'changeEmail'));
        }

        $uservars = $this->getVars();
        if ($uservars['changeemail'] <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        $newemail = FormUtil::getPassedValue('newemail', '', 'POST');
        $newemailagain = FormUtil::getPassedValue('newemailagain', '', 'POST');

        $emailErrors = ModUtil::apiFunc('Users', 'registration', 'getEmailErrors', array(
            'uid'           => $uservars['uid'],
            'email'         => $newemail,
            'emailagain'    => $newemailagain,
            'checkmode'     => 'modify',
        ));

        if (!empty($emailErrors)) {
            foreach ($emailErrors as $field => $errorList) {
                foreach ($errorList as $errorMessage) {
                    LogUtil::registerError($errorMessage);
                }
            }
            return System::redirect(ModUtil::url('Users', 'user', 'changeEmail'));
        }

        // save the provisional email until confimation
        $verificationSent = ModUtil::apiFunc('Users', 'user', 'savePreEmail', array('newemail' => $newemail));

        if (!$verificationSent) {
            return LogUtil::registerError($this->__('Error! There was a problem saving your new e-mail address or sending you a verification message.'), null, ModUtil::url('Users', 'user', 'changeEmail'));
        }

        LogUtil::registerStatus($this->__('Done! You will receive an e-mail to your new e-mail address to confirm the change. You must follow the instructions in that message in order to verify your new address.'));
        return System::redirect(ModUtil::url('Users', 'user', 'main'));
    }

    /**
     * Display the form that allows the user to change the language displayed to him on the site.
     *
     * @return string The rendered template.
     */
    public function changeLang()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        // Assign the languages
        $this->view->assign('languages', ZLanguage::getInstalledLanguageNames())
                   ->assign('usrlang', ZLanguage::getLanguageCode());

        // Return the output that has been generated by this function
        return $this->view->fetch('users_user_changelang.tpl');
    }

    /**
     * Confirm the update of the email address.
     *
     * Available Get Parameters:
     * - confirmcode (string) The confirmation code.
     *
     * @param array $args All parameters passed to this function.
     *                    $args['confirmcode'] (string) Default value for the 'confirmcode' get parameter. Allows this function to be called internally.
     *
     * @return bool True on success, otherwise false.
     */
    public function confirmChEmail($args)
    {
        $confirmcode = FormUtil::getPassedValue('confirmcode', isset($args['confirmcode']) ? $args['confirmcode'] : null, 'GET');
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        // get user new email that is waiting for confirmation
        $preemail = ModUtil::apiFunc('Users', 'user', 'getUserPreEmail');

        $validCode = UserUtil::passwordsMatch($confirmcode, $preemail['verifycode']);

        if (!$preemail || !$validCode) {
            LogUtil::registerError($this->__('Error! Your e-mail has not been found. After your request you have five days to confirm the new e-mail address.'));
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        // user and confirmation code are correct. set the new email
        UserUtil::setVar('email', $preemail['newemail']);

        // the preemail record is deleted
        ModUtil::apiFunc('Users', 'user', 'resetVerifyChgFor', array(
            'uid'       => $preemail['uid'],
            'changetype'=> UserUtil::VERIFYCHGTYPE_EMAIL,
        ));

        LogUtil::registerStatus($this->__('Done! Changed your e-mail address.'));
        return System::redirect(ModUtil::url('Users', 'user', 'main'));
    }
}
