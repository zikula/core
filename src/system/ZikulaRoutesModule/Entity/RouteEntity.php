<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Entity;

use DataUtil;
use FormUtil;
use Symfony\Component\Filesystem\Exception\IOException;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Routing\Route;
use Zikula\RoutesModule\Entity\Base\AbstractRouteEntity as BaseAbstractRouteEntity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for route entities.
 * @ORM\Entity(repositoryClass="\Zikula\RoutesModule\Entity\Repository\Route")
 * @ORM\Table(name="zikula_routes_route",
 *     indexes={
 *         @ORM\Index(name="workflowstateindex", columns={"workflowState"})
 *     }
 * )
 * @ORM\HasLifecycleCallbacks
 */
class RouteEntity extends BaseAbstractRouteEntity
{
    const POSITION_FIXED_TOP = 3;

    const POSITION_MIDDLE = 5;

    const POSITION_FIXED_BOTTOM = 7;

    public function __construct()
    {
        parent::__construct();

        // Always add route to the end of the list.
        $this->sort = -1;

        $this->userRoute = true;
    }

    public function prepareItemActions()
    {
        parent::prepareItemActions();

        if ($this->userRoute) {
            return;
        }

        // Remove edit and delete action for non user routes.
        foreach ($this->_actions as $key => $action) {
            if ($action['icon'] == 'pencil-square-o' || $action['icon'] == 'trash-o') {
                unset($this->_actions[$key]);
            }
        }
    }

    /**
     * Returns the route's path prepended with the bundle prefix.
     *
     * @param null $container Can be used to set the container for \ServiceUtil in case it is not already set.
     *
     * @return string
     */
    public function getPathWithBundlePrefix($container = null)
    {
        if (!isset($this->options['zkNoBundlePrefix']) || !$this->options['zkNoBundlePrefix']) {
            $bundle = $this->getBundle();

            if (!\ServiceUtil::hasContainer()) {
                \ServiceUtil::setContainer($container);
            }

            $modinfo = \ModUtil::getInfoFromName($bundle);

            return "/" . $modinfo["url"] . $this->path;
        }

        return $this->path;
    }

    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     *
     * @ORM\PostLoad
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPostLoadCallback()
     * @return void.
     */
    public function postLoadCallback()
    {
        if (php_sapi_name() == 'cli') {
            return;
        }
        $serviceManager = \ServiceUtil::getManager();
        $requestStack = $serviceManager->get('request_stack');
        if ($requestStack->getCurrentRequest() === null) {
            return;
        }

        $this->performPostLoadCallback();
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     *
     * @ORM\PrePersist
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPrePersistCallback()
     * @return void.
     */
    public function prePersistCallback()
    {
        $this->performPrePersistCallback();
    }
    
    /**
     * Post-Process the data after an insert operation.
     *
     * @ORM\PostPersist
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPostPersistCallback()
     * @return void.
     */
    public function postPersistCallback()
    {
        $this->performPostPersistCallback();
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     *
     * @ORM\PreRemove
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPreRemoveCallback()
     * @return void.
     */
    public function preRemoveCallback()
    {
        $this->performPreRemoveCallback();
    }
    
    /**
     * Post-Process the data after a delete.
     *
     * @ORM\PostRemove
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPostRemoveCallback()
     * @return void
     */
    public function postRemoveCallback()
    {
        $this->performPostRemoveCallback();
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     *
     * @ORM\PreUpdate
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPreUpdateCallback()
     * @return void.
     */
    public function preUpdateCallback()
    {
        $this->performPreUpdateCallback();
    }
    
    /**
     * Post-Process the data after an update operation.
     *
     * @ORM\PostUpdate
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPostUpdateCallback()
     * @return void.
     */
    public function postUpdateCallback()
    {
        $this->performPostUpdateCallback();
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPreSaveCallback()
     * @return void.
     */
    public function preSaveCallback()
    {
        $this->performPreSaveCallback();
    }
    
    /**
     * Post-Process the data after a save operation.
     *
     * @ORM\PostPersist
     * @ORM\PostUpdate
     * @see Zikula\RoutesModule\Entity\RouteEntity::performPostSaveCallback()
     * @return void.
     */
    public function postSaveCallback()
    {
        $this->performPostSaveCallback();
    }
    
}
