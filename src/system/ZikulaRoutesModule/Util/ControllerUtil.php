<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Util;

use Zikula\RoutesModule\Util\Base\ControllerUtil as BaseControllerUtil;
use Zikula_Request_Http;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\NullOutput;
use FOS\JsRoutingBundle\Command\DumpCommand;

/**
 * Utility implementation class for controller helper methods.
 */
class ControllerUtil extends BaseControllerUtil
{

	// Bugfix, @Most#592
    public function retrieveIdentifier(Zikula_Request_Http $request, array $args, $objectType = '', array $idFields)
    {
        $idValues = array();
        foreach ($idFields as $idField) {
            $defaultValue = isset($args[$idField]) && is_numeric($args[$idField]) ? $args[$idField] : 0;
            if ($this->hasCompositeKeys($objectType)) {
                // composite key may be alphanumeric
                $id = $request->attributes->get("_route_params[$idField]", $defaultValue, true);
            } else {
                // single identifier
                $id = (int) filter_var($request->attributes->get("_route_params[$idField]", $defaultValue, true), FILTER_VALIDATE_INT);
            }
            // fallback if id has not been found yet
            if (!$id && $idField != 'id' && count($idFields) == 1) {
                $defaultValue = isset($args['id']) && is_numeric($args['id']) ? $args['id'] : 0;
                $id = (int) filter_var($request->attributes->get("_route_params[$idField]", $defaultValue, true), FILTER_VALIDATE_INT);
            }
            $idValues[$idField] = $id;
        }

        return $idValues;
    }

    /**
     * Dump the routes exposed to javascript to '/web/js/fos_js_routes.js'
     *
     * @param null $lang
     * @return int|string
     * @throws \Exception
     */
    public function dumpJsRoutes($lang = null)
    {
        $installedLanguages = \ZLanguage::getInstalledLanguages();
        if (isset($lang) && in_array($lang, $installedLanguages)) {
            // use provided lang if available
            $langs = array($lang);
        } else {
            $multilingual = (bool)\System::getVar('multilingual', 0);
            if ($multilingual) {
                // get all available locales
                $langs = $installedLanguages;
            } else {
                // get only the default locale
                $langs = array(\System::getVar('language_i18n', 'en')); //$this->getContainer()->getParameter('locale');
            }
        }

        $outputCode = 0;
        $errors = '';
        foreach($langs as $lang) {
            $command = new DumpCommand();
            $command->setContainer($this->getContainer());
            $input = new ArrayInput(array('--locale' => $lang . '__RG__')); // this seems a bit hacky. where does this __RG__ come from in other routes?
            $output = new NullOutput();
            try {
                $outputCode += $command->run($input, $output);
            } catch (\RuntimeException $e) {
                $errors .= $e->getMessage() .". ";
            }
        }
        return $outputCode = 0 ? $outputCode : $errors;
    }
}
