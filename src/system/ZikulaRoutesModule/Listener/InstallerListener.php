<?php
/**
 * Routes.
 *
 * @copyright Zikula contributors (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Zikula contributors <support@zikula.org>.
 * @link http://www.zikula.org
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

namespace Zikula\RoutesModule\Listener;

use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Routing\RouteCollection;
use Zikula\RoutesModule\Listener\Base\InstallerListener as BaseInstallerListener;
use Zikula\RoutesModule\Routing\RouteFinder;
use Zikula\Core\AbstractModule;
use Zikula\Core\CoreEvents;
use Zikula\Core\Event\GenericEvent;
use Zikula\Core\Event\ModuleStateEvent;
use Zikula\Bundle\CoreBundle\CacheClearer;
use Zikula\RoutesModule\Util\ControllerUtil;

/**
 * Event handler implementation class for module installer events.
 */
class InstallerListener extends BaseInstallerListener
{
    private $em;

    private $routeFinder;

    private $cacheClearer;

    private $controllerHelper;

    function __construct(EntityManagerInterface $em, RouteFinder $routeFinder, CacheClearer $cacheClearer, ControllerUtil $controllerHelper)
    {
        $this->em = $em;
        $this->routeFinder = $routeFinder;
        $this->cacheClearer = $cacheClearer;
        $this->controllerHelper = $controllerHelper;
    }

    /**
     * Makes our handlers known to the event system.
     */
    public static function getSubscribedEvents()
    {
        $events = parent::getSubscribedEvents();
        $events[CoreEvents::MODULE_POSTINSTALL] = array('modulePostInstall', 5);
        return $events;
    }
    
    /**
     * Listener for the `module.postinstall` event.
     *
     * Called after a module has been successfully installed.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function modulePostInstall(ModuleStateEvent $event)
    {
//        parent::modulePostInstall($event); // not available in current generation of MOST

        $module = $event->getModule();
        if ($module === null) {
            return;
        }

        if ($module->getName() === 'ZikulaRoutesModule') {
            // The module itself just got installed, reload all routes.
            $this->em->getRepository('ZikulaRoutesModule:RouteEntity')->reloadAllRoutes();
            // Reload multilingual routing settings.
            \ModUtil::apiFunc('ZikulaRoutesModule', 'admin', 'reloadMultilingualRoutingSettings');
        } else {
            $this->addRoutesToCache($module);
        }

        $this->cacheClearer->clear('symfony.routing');

        // reload **all** JS routes
        $this->controllerHelper->dumpJsRoutes();
    }
    
    /**
     * Listener for the `module.upgrade` event.
     *
     * Called after a module has been successfully upgraded.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function moduleUpgraded(ModuleStateEvent $event)
    {
        parent::moduleUpgraded($event);

        $module = $event->getModule();
        if ($module === null) {
            return;
        }

        try {
            $this->removeRoutesFromCache($module);
        } catch (DBALException $e) {
            if (\System::isUpgrading()) {
                // This happens when the RoutesModule isn't installed.
                return;
            } else {
                throw $e;
            }
        }
        $this->addRoutesToCache($module);

        $this->cacheClearer->clear('symfony.routing');

        // reload **all** JS routes
        $this->controllerHelper->dumpJsRoutes();
    }
    
    /**
     * Listener for the `module.enable` event.
     *
     * Called after a module has been successfully enabled.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function moduleEnabled(ModuleStateEvent $event)
    {
        parent::moduleEnabled($event);
    }
    
    /**
     * Listener for the `module.disable` event.
     *
     * Called after a module has been successfully disabled.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function moduleDisabled(ModuleStateEvent $event)
    {
        parent::moduleDisabled($event);
    }
    
    /**
     * Listener for the `module.remove` event.
     *
     * Called after a module has been successfully removed.
     * Receives `$modinfo` as args.
     *
     * @param ModuleStateEvent $event The event instance.
     */
    public function moduleRemoved(ModuleStateEvent $event)
    {
        parent::moduleRemoved($event);

        $module = $event->getModule();
        if ($module === null || $module->getName() == 'ZikulaRoutesModule') {
            return;
        }

        $this->removeRoutesFromCache($module);

        // reload **all** JS routes
        $this->controllerHelper->dumpJsRoutes();

        $this->cacheClearer->clear('symfony.routing');
    }
    
    /**
     * Listener for the `installer.subscriberarea.uninstalled` event.
     *
     * Called after a hook subscriber area has been unregistered.
     * Receives args['areaid'] as the areaId. Use this to remove orphan data associated with this area.
     *
     * @param GenericEvent $event The event instance.
     */
    public function subscriberAreaUninstalled(GenericEvent $event)
    {
        parent::subscriberAreaUninstalled($event);
    }

    /**
     * Add the specified routes to the cache.
     *
     * @param AbstractModule $module
     */
    private function addRoutesToCache(AbstractModule $module)
    {
        $routeCollection = $this->routeFinder->find($module);

        if ($routeCollection->count() > 0) {
            $this->em->getRepository('ZikulaRoutesModule:RouteEntity')->addRouteCollection($module, $routeCollection);
        }
    }

    /**
     * Remove all routes of the specified module from cache.
     *
     * @param AbstractModule $module
     */
    private function removeRoutesFromCache(AbstractModule $module)
    {
        $this->em->getRepository('ZikulaRoutesModule:RouteEntity')->removeAllOfModule($module);
    }
}
