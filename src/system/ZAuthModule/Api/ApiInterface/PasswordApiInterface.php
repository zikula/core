<?php

/*
 * This file is part of the Zikula package.
 *
 * Copyright Zikula Foundation - http://zikula.org/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Zikula\ZAuthModule\Api\ApiInterface;

interface PasswordApiInterface
{
    const SALT_DELIM = '$';

    const SALT_LENGTH = 5;

    const DEFAULT_HASH_METHOD_CODE = 8;

    const MIN_LENGTH = 5;

    const MAX_LENGTH = 25;

    /**
     * Given a string return it's hash.
     *
     * @param string $unhashedPassword An unhashed password, as might be entered by a user or generated by the system, that meets
     *                                  all of the constraints of a valid password for a user account
     * @param int $hashMethodCode An internal code identifying one of the valid user password hashing methods; optional
     *
     * @return string A hashed password
     * @throws \InvalidArgumentException
     */
    public function getHashedPassword($unhashedPassword, $hashMethodCode = self::DEFAULT_HASH_METHOD_CODE);

    /**
     * Create a system-generated password or password-like code, meeting the configured constraints for a password.
     *
     * @param int $length
     * @return string The generated (unhashed) password-like string
     */
    public function generatePassword($length = self::MIN_LENGTH);

    /**
     * Compare a code to a hashed value, to determine if they match.
     *
     * @param string $unhashedPassword The password-like code entered by the user
     * @param string $hashedPassword   The hashed password-like code that the entered password-like code is to be compared to
     *
     * @return bool True if the $unhashedPassword matches the $hashedPassword with the given hashing method;
     *                  false if they do not match
     * @throws \InvalidArgumentException
     */
    public function passwordsMatch($unhashedPassword, $hashedPassword);
}
