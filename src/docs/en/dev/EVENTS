Events
======

You may register event listeners with

    EventUtil::attach($name, $handler);

You may trigger events with

    [php]
    $event = new Zikula_Event($eventName, $subject, $args, $data);
    EventUtil::notify($event);

Any changes made to the `$event` object or `$subject` in the handlers will be carried over (standard PHP5 behavior).

#### _List of event names you can take advantage of in the core._


BOOTSTRAP
---------

#### `boostrap.getconfig`
Called in bootstrap.
Receives Zikula_Core as subject.
Handler should setNotified().
Purpose is to load the config/config.php

#### `bootstrap.custom`
Called in bootstrap.
Receives Zikula_Core as subject.

CORE
----

#### `api.method_not_found`
Called in instances of Zikula_AbstractApi from __call()
Receives arguments from __call($method, argument) as $args
$event['method'] is the method which didn't exist in the main class.
$event['args'] is the arguments that were passed.
The event subject is the class where the method was not found.
Must exit if $event['method'] does not match whatever the handler expects.
Modify $event->data and $event->setNotify().

#### `core.preinit`
Occurs after the config.php is loaded.

#### `core.init`
Occurs after each `System::init()` stage, `$event['stage']` contains the stage.
To check if the handler should execute, do `if($event['stage'] & Zikula_Core::STAGE_*)`

#### `core.postinit`
Occurs just before System::init() exits from normal execution.

#### `controller.method_not_found`
Called in instances of `Zikula_AbstractController` from `__call()`
Receives arguments from `__call($method, argument)` as `$args`
`$event['method']` is the method which didn't exist in the main class.
`$event['args']` is the arguments that were passed.
The event subject is the class where the method was not found.
Must exit if `$event['method']` does not match whatever the handler expects.
Modify `$event->data` and `$event->setNotify()`

#### `dbobject.pre/post*`
Takes subject of $this.


MODULE
------

#### `installer.module.installed`
Called after a module is successfully installed.
Receives `$modinfo` as args

#### `installer.module.upgraded`
Called after a module is successfully upgraded.
Receives `$modinfo` as args

#### `installer.module.uninstalled`
Called after a module is successfully uninstalled.
Receives `$modinfo` as args

#### `module_dispatch.postloadgeneric`
receives the args `array('modinfo' => $modinfo, 'type' => $type, 'force' => $force, 'api' => $api)`

#### `module_dispatch.preexecute`
Occurs in `ModUtil::exec()` after function call with the following args:
`array('modname' => $modname, 'modfunc' => $modfunc, 'args' => $args, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)`

#### `module_dispatch.postexecute`
Occurs in `ModUtil::exec()` after function call with the following args:
`array('modname' => $modname, 'modfunc' => $modfunc, 'args' => $args, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)`
receives the modules output with `$event->getData();`
can modify this output with `$event->setData($data);`

#### `module_dispatch.type_not_found`
if `$type` is not found in `ModUtil::exec()` (e.g. no admin.php)
_This is for classic module types only._
`array('modname' => $modname, 'modfunc' => $modfunc, 'args' => $args, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)`
This kind of eventhandler should

1. Check $event['modfunc'] to see if it should run else exit silently.
2. Do something like $result = {$event['modfunc']}({$event['args'});
3. Save the result $event->setData($result).
4. $event->setNotify().
5. return void

#### `module_dispatch.custom_classname`
In order to override the classname calculated in `ModUtil::exec()`
In order to override a pre-existing controller/api method, use this event type to override the class name that is loaded.
This allows to override the methods using inheritance.
Receives no subject, args of `array('modname' => $modname, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)`
and 'event data' of `$className`.  This can be altered by setting `$event->setData()` followed by `$event->setNotified()`

#### `module_dispatch.service_links`
Occurs when building admin menu items. Adds sublinks to a Services menu that is appended to all modules if populated.
triggered by module_dispatch.postexecute in bootstrap.
format data like so:

    $event->data[] = array('url' => ModUtil::url(<modname>, <type>, <method>), 'text' => __('Link Text'));

#### `module.mailer.api.sendmessage`
Invoked from `Mailer_Api_User#sendmessage`. Subject is `Mailer_Api_User` with `$args`.
This is a notifyUntil event so the event must `$event->setNotified()` and set any
return data into `$event->data`, or `$event->setData()`

#### `pageutil.addvar_filter`
Used to override things like system or module stylesheets or javascript.
Subject is the `$varname`, and `$event->data` an array of values to be modified by the filter.
Simply test with something like

    if (($key = array_search('system/Users/javascript/somescript.js', $event->data)) !== false) {
        $event->data[$key] = 'config/javascript/myoverride.js';
    }

This single filter can be used to override all css or js scripts or any other var types
sent to `PageUtil::addVar()`.


ERRORS
------
#### `frontcontroller.exception`
Invoked if an exception is trapped in the front controller (index.php).
Subject is the exception that was caught.
Receives arguments array('modinfo' => $modinfo, 'type' => $type, 'func' => $func, 'arguments' => $arguments));
Event handler must `setNotified()` if it executes.

#### `setup.errorreporting`
Invoked during `System::init()`.  Used to activate `set_error_handler()`.  Event must `setNotified()`.

#### `system.outputfilter`
Filter type event for output filter HTML sanitisation

#### `systemerror`
args gets `array('errorno' => $errno, 'errstr' => $errstr, 'errfile' => $errfile, 'errline' => $errline, 'errcontext' => $errcontext)`

### THEME AND VIEW

#### `theme.ajax_request`
Triggered by a native ajax request from a theme.  This occurs when the following call is made
`ajax.php?module=theme&func=dispatch&.....`
Handlers should be registered in the theme.

#### `theme.init`
Occurs just before `Theme#__construct()` exits.  Subject is `$this`, args are
`array('theme' => $theme, 'usefilters' => $usefilters, 'themeinfo' => $themeinfo)`

#### `theme.load_config`
Runs just before `Theme#_load_config()` completed.  Subject is the Theme instance.

#### `theme.prefooter`
Occurs in `Theme::themefooter()` just before getting the `$maincontent`.  The
event subject is `$this` (Theme instance) and has $maincontent as the event data
which you can modify with `$event->setData()` in the event handler.

#### `theme.postfooter`
Occurs in `Theme::themefooter()` just after rendering the theme.  The
event subject is `$this` (Theme instance) and the event data is the rendered
output which you can modify with `$event->setData()` in the event handler.

#### `view.init`
Occurs just before `Zikula_View#__construct()` exits. Subject is `$this`, args are
`array('module' => $module, 'modinfo' => $modinfo, 'themeinfo' => $themeinfo)`

#### `view.fetch`
Filter of result of a fetch.  Receives `Zikula_View` instance as subject, args are
`array('template' => $template), $data was the result of the fetch to be filtered.`


USER & GROUP
------------

#### `user.login.veto`
Occurs immediately prior to a login that is expected to succeed. (All prerequisites for a
successful login have been checked and are satisfied.) This event allows a module to
intercept the login process and prevent a successful login from taking place. This
event uses `notifyUntil()`, so handlers are called until either one vetoes the login attempt,
or there are no more handlers for the event. A handler that needs to veto a login attempt
should call `setNotify()`. This will prevent other handlers from receiving the event, will
return to the login process, and will prevent the login from taking place. A handler that
vetoes a login attempt should set an appropriate error message and give any additional
feedback to the user attempting to log in that might be appropriate. If a handler does not
need to veto the login attempt, then it should simply return null (`return;` with no
return value).

Note: the user __will not__ be logged in when the event handler is
executing. Any attempt to check a user's permissions, his logged-in status, or any
operation will return a value equivalent to what an anonymous (guest) user would see. Care
should be taken to ensure that sensitive operations done within a handler for this event
do not introduce breaches of security.

 * The subject of the event will contain the user's account record, equivalent to
   `UserUtil::getVars($uid)`.
 * `$event['authentication_module']` will contain the name of the module that authenticated the user.
 * `$event['uid']` will contain the user's uid.

#### `user.login.succeeded`
Occurs right after a successful attempt to log in. All handlers are notified.
 * The event subject contains the user's user record (from `UserUtil::getVars($event['uid'])`)
 * `$event['uid']` is the UID of the logged in user.
 * `$event['authentication_module']` with the name of the module that authenticated.

#### `user.login.failed`
Occurs on login failure. All handlers are notified. (Vetoed attempts to log in will subsequently
generate this event.)
 * the subject of the event may contain the user account record of user that attempted to log in, if it
   could be determined (e.g., it will be supplied if the login attempt failed because of a bad password,
   but it will not be supplied if the attempt failed because the uname could not be matched with a user
   account record).
 * `$event['authentication_module']` with the name of the module that attempted to authenticate.
 * `$event['uid'] may contain the uid of user that attempted to log in, if it could be determined (e.g.,
   it will be supplied if the login attempt failed because of a bad password, but it will not be supplied
   if the attempt failed because the uname could not be matched with a user account record).

#### `user.logout.succeeded`
Occurs right after a successful logout. All handlers are notified.
 * The event's subject contains the user's user record
 * `$event['uid']` is the UID of the user who logged out.

#### `user.logout.failed`
Occurs right after a successful logout. All handlers are notified.
 * the subject of the event will contain the user account record of the user that
   attempted to log out
 * `$event['uid']` is the UID of the user who attempted to log out.

#### `user.gettheme`
Called during UserUtil::getTheme() and is used to filter the results.  Receives arg['type']
with the type of result to be filtered and the $themeName in the $event->data which can
be modified.  Must $event->setNotified() if handler performs filter.

#### `user.create`
Occurs after a user is created. All handlers are notified. It does not apply to creation of a pending
registration. The full user record created is available as the subject.

#### `user.update`
Occurs after a user is updated. All handlers are notified. The full updated user record is available
as the subject.

#### `user.delete`
Occurs after a user is deleted from the system. All handlers are notified. The full user record
deleted is available as the subject.

#### `group.create`
Occurs after a group is created. All handlers are notified. The full group record created is available
as the subject.

#### `group.update`
Occurs after a group is updated. All handlers are notified. The full updated group record is available
as the subject.

#### `group.delete`
Occurs after a group is deleted from the system. All handlers are notified. The full group record
deleted is available as the subject.

#### `group.adduser`
Occurs after a user is added to a group. All handlers are notified. It does not apply to pending
membership requests. The uid and gid are available as the subject.

#### `group.removeuser`
Occurs after a user is removed from a group. All handlers are notified. The uid and gid are
available as the subject.

Users Module
------------
#### `users.config.updated
Occurs after the Users module configuration has been updated via the administration interface.
