<?php

namespace DoctrineProxy\__CG__\Zikula\MenuModule\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class MenuItemEntity extends \Zikula\MenuModule\Entity\MenuItemEntity implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'id', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'title', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'lft', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'lvl', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'rgt', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'root', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'parent', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'children', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'options', 'reflection'];
        }

        return ['__isInitialized__', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'id', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'title', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'lft', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'lvl', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'rgt', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'root', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'parent', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'children', '' . "\0" . 'Zikula\\MenuModule\\Entity\\MenuItemEntity' . "\0" . 'options', 'reflection'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (MenuItemEntity $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getLft(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLft', []);

        return parent::getLft();
    }

    /**
     * {@inheritDoc}
     */
    public function getLvl(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLvl', []);

        return parent::getLvl();
    }

    /**
     * {@inheritDoc}
     */
    public function getRgt(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRgt', []);

        return parent::getRgt();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoot(\Zikula\MenuModule\Entity\MenuItemEntity $root): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoot', [$root]);

        parent::setRoot($root);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoot(): \Zikula\MenuModule\Entity\MenuItemEntity
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoot', []);

        return parent::getRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Zikula\MenuModule\Entity\MenuItemEntity $parent = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent(): ?\Zikula\MenuModule\Entity\MenuItemEntity
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', []);

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function getOption(string $name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption', [$name, $default]);

        return parent::getOption($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setOptions(array $options = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOptions', [$options]);

        parent::setOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function setOption(string $name, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption', [$name, $value]);

        parent::setOption($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOption(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOption', [$name]);

        parent::removeOption($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasOptions(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasOptions', []);

        return parent::hasOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren(): \Traversable
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute(string $name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute', [$name, $default]);

        return parent::getAttribute($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributes(array $attributes = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributes', [$attributes]);

        parent::setAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute(string $name, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute', [$name, $value]);

        parent::setAttribute($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttribute(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttribute', [$name]);

        parent::removeAttribute($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttributes(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttributes', []);

        return parent::hasAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkAttributes(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkAttributes', []);

        return parent::getLinkAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkAttribute(string $name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkAttribute', [$name, $default]);

        return parent::getLinkAttribute($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkAttributes(array $attributes = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkAttributes', [$attributes]);

        parent::setLinkAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkAttribute(string $name, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkAttribute', [$name, $value]);

        parent::setLinkAttribute($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLinkAttribute(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLinkAttribute', [$name]);

        parent::removeLinkAttribute($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLinkAttributes(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLinkAttributes', []);

        return parent::hasLinkAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildrenAttributes(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildrenAttributes', []);

        return parent::getChildrenAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildrenAttribute(string $name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildrenAttribute', [$name, $default]);

        return parent::getChildrenAttribute($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setChildrenAttributes(array $attributes = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildrenAttributes', [$attributes]);

        parent::setChildrenAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function setChildrenAttribute(string $name, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildrenAttribute', [$name, $value]);

        parent::setChildrenAttribute($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChildrenAttribute(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChildrenAttribute', [$name]);

        parent::removeChildrenAttribute($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasChildrenAttributes(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasChildrenAttributes', []);

        return parent::hasChildrenAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabelAttributes(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabelAttributes', []);

        return parent::getLabelAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabelAttribute(string $name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabelAttribute', [$name, $default]);

        return parent::getLabelAttribute($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setLabelAttributes(array $attributes = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabelAttributes', [$attributes]);

        parent::setLabelAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function setLabelAttribute(string $name, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabelAttribute', [$name, $value]);

        parent::setLabelAttribute($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLabelAttribute(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLabelAttribute', [$name]);

        parent::removeLabelAttribute($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasLabelAttributes(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasLabelAttributes', []);

        return parent::hasLabelAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getExtras(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtras', []);

        return parent::getExtras();
    }

    /**
     * {@inheritDoc}
     */
    public function getExtra(string $name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtra', [$name, $default]);

        return parent::getExtra($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setExtras(array $attributes = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtras', [$attributes]);

        parent::setExtras($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function setExtra(string $name, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtra', [$name, $value]);

        parent::setExtra($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function removeExtra(string $name): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeExtra', [$name]);

        parent::removeExtra($name);
    }

    /**
     * {@inheritDoc}
     */
    public function hasExtras(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasExtras', []);

        return parent::hasExtras();
    }

    /**
     * {@inheritDoc}
     */
    public function toJson($prefix = ''): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toJson', [$prefix]);

        return parent::toJson($prefix);
    }

    /**
     * {@inheritDoc}
     */
    public function getReflection(): \ReflectionObject
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReflection', []);

        return parent::getReflection();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($key): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$key]);

        return parent::offsetExists($key);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$key]);

        return parent::offsetGet($key);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($key, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$key, $value]);

        parent::offsetSet($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($key): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$key]);

        parent::offsetUnset($key);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function merge(array $array = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'merge', [$array]);

        parent::merge($array);
    }

}
