<?php

namespace DoctrineProxy\__CG__\Zikula\RoutesModule\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class RouteEntity extends \Zikula\RoutesModule\Entity\RouteEntity implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '_objectType', 'id', 'workflowState', 'bundle', 'controller', 'action', 'path', 'host', 'schemes', 'methods', 'prependBundlePrefix', 'translatable', 'translationPrefix', 'defaults', 'requirements', 'options', 'condition', 'description', 'sort', 'reflection', 'createdBy', 'createdDate', 'updatedBy', 'updatedDate'];
        }

        return ['__isInitialized__', '_objectType', 'id', 'workflowState', 'bundle', 'controller', 'action', 'path', 'host', 'schemes', 'methods', 'prependBundlePrefix', 'translatable', 'translationPrefix', 'defaults', 'requirements', 'options', 'condition', 'description', 'sort', 'reflection', 'createdBy', 'createdDate', 'updatedBy', 'updatedDate'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (RouteEntity $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function get_objectType(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_objectType', []);

        return parent::get_objectType();
    }

    /**
     * {@inheritDoc}
     */
    public function set_objectType(string $_objectType): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'set_objectType', [$_objectType]);

        parent::set_objectType($_objectType);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkflowState(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkflowState', []);

        return parent::getWorkflowState();
    }

    /**
     * {@inheritDoc}
     */
    public function setWorkflowState(string $workflowState): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWorkflowState', [$workflowState]);

        parent::setWorkflowState($workflowState);
    }

    /**
     * {@inheritDoc}
     */
    public function getBundle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBundle', []);

        return parent::getBundle();
    }

    /**
     * {@inheritDoc}
     */
    public function setBundle(string $bundle): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBundle', [$bundle]);

        parent::setBundle($bundle);
    }

    /**
     * {@inheritDoc}
     */
    public function getController(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getController', []);

        return parent::getController();
    }

    /**
     * {@inheritDoc}
     */
    public function setController(string $controller): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setController', [$controller]);

        parent::setController($controller);
    }

    /**
     * {@inheritDoc}
     */
    public function getAction(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAction', []);

        return parent::getAction();
    }

    /**
     * {@inheritDoc}
     */
    public function setAction(string $action): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAction', [$action]);

        parent::setAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getPath(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setPath(string $path): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPath', [$path]);

        parent::setPath($path);
    }

    /**
     * {@inheritDoc}
     */
    public function getHost(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHost', []);

        return parent::getHost();
    }

    /**
     * {@inheritDoc}
     */
    public function setHost(string $host = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHost', [$host]);

        parent::setHost($host);
    }

    /**
     * {@inheritDoc}
     */
    public function getSchemes(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSchemes', []);

        return parent::getSchemes();
    }

    /**
     * {@inheritDoc}
     */
    public function setSchemes(string $schemes): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSchemes', [$schemes]);

        parent::setSchemes($schemes);
    }

    /**
     * {@inheritDoc}
     */
    public function getMethods(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMethods', []);

        return parent::getMethods();
    }

    /**
     * {@inheritDoc}
     */
    public function setMethods(string $methods): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMethods', [$methods]);

        parent::setMethods($methods);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrependBundlePrefix(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrependBundlePrefix', []);

        return parent::getPrependBundlePrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrependBundlePrefix(bool $prependBundlePrefix): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrependBundlePrefix', [$prependBundlePrefix]);

        parent::setPrependBundlePrefix($prependBundlePrefix);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslatable(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslatable', []);

        return parent::getTranslatable();
    }

    /**
     * {@inheritDoc}
     */
    public function setTranslatable(bool $translatable): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTranslatable', [$translatable]);

        parent::setTranslatable($translatable);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslationPrefix(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslationPrefix', []);

        return parent::getTranslationPrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function setTranslationPrefix(string $translationPrefix = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTranslationPrefix', [$translationPrefix]);

        parent::setTranslationPrefix($translationPrefix);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaults(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaults', []);

        return parent::getDefaults();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaults(array $defaults): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaults', [$defaults]);

        parent::setDefaults($defaults);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequirements(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequirements', []);

        return parent::getRequirements();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequirements(array $requirements): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequirements', [$requirements]);

        parent::setRequirements($requirements);
    }

    /**
     * {@inheritDoc}
     */
    public function getOptions(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOptions', []);

        return parent::getOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function setOptions(array $options): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOptions', [$options]);

        parent::setOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function getCondition(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCondition', []);

        return parent::getCondition();
    }

    /**
     * {@inheritDoc}
     */
    public function setCondition(string $condition = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCondition', [$condition]);

        parent::setCondition($condition);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(string $description = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getSort(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSort', []);

        return parent::getSort();
    }

    /**
     * {@inheritDoc}
     */
    public function setSort(int $sort): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSort', [$sort]);

        parent::setSort($sort);
    }

    /**
     * {@inheritDoc}
     */
    public function createUrlArgs(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createUrlArgs', []);

        return parent::createUrlArgs();
    }

    /**
     * {@inheritDoc}
     */
    public function getKey(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKey', []);

        return parent::getKey();
    }

    /**
     * {@inheritDoc}
     */
    public function getRelatedObjectsToPersist(array &$objects = array (
)): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelatedObjectsToPersist', [$objects]);

        return parent::getRelatedObjectsToPersist($objects);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getReflection(): \ReflectionObject
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReflection', []);

        return parent::getReflection();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($key): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$key]);

        return parent::offsetExists($key);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$key]);

        return parent::offsetGet($key);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($key, $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$key, $value]);

        parent::offsetSet($key, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($key): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$key]);

        parent::offsetUnset($key);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function merge(array $array = array (
)): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'merge', [$array]);

        parent::merge($array);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy(): ?\Zikula\UsersModule\Entity\UserEntity
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy(\Zikula\UsersModule\Entity\UserEntity $createdBy = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', []);

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate(\DateTimeInterface $createdDate = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', [$createdDate]);

        parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy(): ?\Zikula\UsersModule\Entity\UserEntity
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy(\Zikula\UsersModule\Entity\UserEntity $updatedBy = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedDate', []);

        return parent::getUpdatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedDate(\DateTimeInterface $updatedDate = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedDate', [$updatedDate]);

        parent::setUpdatedDate($updatedDate);
    }

}
