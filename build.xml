<?xml version="1.0" encoding="UTF-8"?>
<project name="zikula" default="clean">

    <!-- invokation
        phing -f $WORKSPACE/source/build.xml clean prepare phpcs phpcb phpcpd phpunit pdepend phpmd docblox jsdoc build build_delete -Dworkspace=$WORKSPACE -Djob_name=$JOB_NAME -Dbuild_number=$BUILD_NUMBER -Dbuild_tag=$BUILD_TAG -Dbuild_id=$BUILD_ID -Dsvn_revision=$SVN_REVISION
        # note phpcb must follow phpcs
        phing -f $WORKSPACE/source/build.xml clean build build_delete -Dworkspace=$WORKSPACE -Djob_name=$JOB_NAME -Dbuild_number=$BUILD_NUMBER -Dbuild_tag=$BUILD_TAG -Dbuild_id=$BUILD_ID -Dsvn_revision=$SVN_REVISION
    -->

    <!--
        BUILD_NUMBER - The current build number, such as "153"
        BUILD_ID - The current build id, (YYYY-MM-DD_hh-mm-ss)
        JOB_NAME - Name of the project of this build, such as "foo"
        BUILD_TAG - String of "jenkins-${JOB_NAME}-${BUILD_NUMBER}".
        WORKSPACE - The absolute path of the workspace.
        SVN_REVISION - The revision this build is based on.
    -->

    <property name="builddir" value="${workspace}/build"/>
    <property name="sourcedir" value="${workspace}/source"/>
    <property name="package" value="${job_name}"/>
    <property name="exportdir" value="${builddir}/export"/>
    <property name="archivedir" value="${builddir}/archive"/>
    <property name="packagepath" value="${exportdir}/${job_name}"/>
    <property name="checksumpath" value="${archivedir}/${package}-checksums"/>
    <property name="tmpdir" value="${builddir}/tmp"/>
    <property name="ignorepaths" value="lib/vendor/*,javascript/*,system/*,themes/*,install/*,lib/legacy,plugins/*"/>

    <!-- need a second property since phpdoc doesn't respect wildcard patterns -->
    <property name="ignorefiletypes" value="*.css,*.js"/>

    <target name="clean">
        <echo msg="Clean..."/>
        <delete dir="${builddir}" includeemptydirs="true"/>
        <!--<delete dir="${sourcedir}/src/vendor" includeemptydirs="true"/>-->
        <!--<delete file="${workspace}/source/composer.lock"/>-->
        <!--<delete file="${workspace}/source/composer.phar"/>-->
    </target>

    <target name="prepare">
        <echo msg="Prepare..."/>
        <mkdir dir="${builddir}"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/docs"/>
        <mkdir dir="${builddir}/phpcb"/>
        <mkdir dir="${builddir}/archive"/>
        <mkdir dir="${builddir}/export"/>
        <mkdir dir="${builddir}/patch"/>
        <mkdir dir="${builddir}/tmp"/>
        <mkdir dir="${builddir}/jsdoc"/>
        <exec command="curl -s https://getcomposer.org/installer | php;mv composer.phar ${workspace}/source"/>
        <exec command="${workspace}/source/composer.phar install --prefer-dist --no-dev --optimize-autoloader" checkreturn="true" passthru="true" /><!-- no-scripts removed -->
    </target>

    <!-- Build archives -->
    <target name="build" depends="prepare">
        <echo msg="Exporting for build..."/>
        <!-- ATTN export urls require manual edit -->

        <exec command="cp -a ${workspace}/source/src ${packagepath}"/>

        <!-- generate composer_vendors file -->
        <exec command="${workspace}/source/build.php build:generate_vendor_doc --write-to '${packagepath}/docs/Composer_Vendors.md'" checkreturn="true" passthru="true"/>

        <!-- generate less file -->
        <exec command="${workspace}/source/build.php build:generate_less --write-to '${packagepath}/web/bootstrap-font-awesome.css'" checkreturn="true" passthru="true"/>

        <!-- move doc files from repo root -->
        <echo msg="Moving doc files to /docs/en ..."/>
        <move file="${workspace}/source/README.md" tofile="${packagepath}/docs/en/README.md" overwrite="true"/>
        <copy file="${workspace}/source/INSTALL-Core1.x.md" tofile="${packagepath}/INSTALL-Core1.x.md" overwrite="true"/>
        <move file="${workspace}/source/INSTALL-Core1.x.md" tofile="${packagepath}/docs/en/INSTALL-Core1.x.md" overwrite="true"/>
        <copy file="${workspace}/source/UPGRADE-Core1.x.md" tofile="${packagepath}/UPGRADE-Core1.x.md" overwrite="true"/>
        <move file="${workspace}/source/UPGRADE-Core1.x.md" tofile="${packagepath}/docs/en/UPGRADE-Core1.x.md" overwrite="true"/>
        <move file="${workspace}/source/CHANGELOG-1.4.md" tofile="${packagepath}/docs/en/CHANGELOG-1.4.md" overwrite="true"/>
        <move file="${workspace}/source/CHANGELOG-1.5.md" tofile="${packagepath}/docs/en/CHANGELOG-1.5.md" overwrite="true"/>
        <move file="${workspace}/source/composer.json" tofile="${packagepath}/docs/en/dev/composer.json" overwrite="true"/>
        <move file="${workspace}/source/composer.lock" tofile="${packagepath}/docs/en/dev/composer.lock" overwrite="true"/>

        <exec command="${workspace}/source/build.php build:purge_vendors --vendor-dir ${packagepath}/vendor" checkreturn="true" passthru="true"/>
        <exec command="${workspace}/source/build.php build:fix_autoloader --vendor-dir ${packagepath}/vendor" checkreturn="true" passthru="true"/>

        <!-- install assets -->
        <!--<exec command="php ${packagepath}/app/console assets:install ${packagepath}/web" checkreturn="true" passthru="true"/>-->

        <!-- create translation file -->
        <exec command="php -dmemory_limit=2G ${packagepath}/app/console translation:extract template --output-format=po --output-dir=${packagepath}/app/Resources/translations --enable-extractor=jms_i18n_routing --dir=${packagepath}/system --dir=${packagepath}/lib/Zikula/Bundle" checkreturn="true" passthru="true" />
        <!-- Clear cache and log directories filled by the console command above -->
        <delete includeEmptyDirs="true">
            <fileset dir="${packagepath}/app/cache" defaultexcludes="false">
                <exclude name=".htaccess" />
                <include name="**/*" />
            </fileset>
        </delete>
        <delete includeEmptyDirs="true">
            <fileset dir="${packagepath}/app/logs" defaultexcludes="false">
                <exclude name=".htaccess" />
                <include name="**/*" />
            </fileset>
        </delete>

        <echo msg="Prepare permissions..."/>
        <chmod file="${packagepath}/app/config" mode="0777"/>
        <chmod file="${packagepath}/app/config/dynamic" mode="0777"/>
        <chmod file="${packagepath}/app/cache" mode="0777"/>
        <chmod file="${packagepath}/app/logs" mode="0777"/>
        <chmod file="${packagepath}/config" mode="0777"/>
        <chmod file="${packagepath}/userdata" mode="0777"/>

        <echo msg="Creating archive..."/>
        <!-- zip's don't play nicely in Phing - using direct command -->
        <exec escape="false" command="cd ${exportdir}; zip -D -r ${archivedir}/${package}.zip ." />
        <!--zip destfile="${archivedir}/${package}.zip">
            <fileset dir="${exportdir}">
                <include name="**/**"/>
            </fileset>
        </zip-->

        <!-- Use tar at commandline because phing tarballs don't support file chmod -->
        <exec escape="false"
              command="cd ${exportdir}; tar cp ${job_name} > ${archivedir}/${package}.tar; gzip ${archivedir}/${package}.tar"/>
        <!-- tar destfile="${archivedir}/${package}.tar.gz" compression="gzip">
            <fileset dir="${exportdir}/${job_name}">
                <include name="**/**" />
            </fileset>
        </tar -->

        <echo msg="Files copied and compressed in build directory OK!"/>

        <phingcall target="build_checksums"/>
    </target>

    <target name="build_delete">
        <echo msg="Nothing to do in build delete target."/>
        <!-- clean up export dir, this is not needed (unless we are debugging) -->
        <!-- delete dir="${packagepath}" includeemptydirs="true" -->
    </target>

    <target name="build_checksums">
        <echo msg="Creating MD5 and SHA1 checksums..."/>
        <exec escape="false" command="echo -----------------md5sums----------------- > ${checksumpath}.tmp"/>
        <exec escape="false" command="md5sum ${archivedir}/*.tar.gz ${archivedir}/*.zip >> ${checksumpath}.tmp"/>

        <exec escape="false" command="echo -----------------sha1sums----------------- >> ${checksumpath}.tmp"/>
        <exec escape="false" command="sha1sum ${archivedir}/*.tar.gz ${archivedir}/*.zip >> ${checksumpath}.tmp"/>

        <exec escape="false" command="cat ${checksumpath}.tmp | sed 's!${archivedir}/!!g' > ${checksumpath}.txt"/>
        <delete file="${checksumpath}.tmp"/>
    </target>

</project>
