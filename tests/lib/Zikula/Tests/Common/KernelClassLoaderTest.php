<?php
namespace Zikula\Tests\Common;
use Zikula\Common\KernelClassLoader;

/**
 * Test class for Zikula_KernelClassLoader.
 * Generated by PHPUnit on 2011-02-05 at 11:30:23.
 */
class KernelClassLoaderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Zikula_KernelClassLoader
     */
    protected $classLoader;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->classLoader = new KernelClassLoader();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->classLoader = null;
        parent::tearDown();
    }

    /**
     * @dataProvider providerGetClassIncludePath
     */
    public function testRegister($namespace, $path, $separator, $class, $expected)
    {
        $this->classLoader->register($namespace, $path, $separator);
        $this->assertAttributeSame(array($namespace => array('path' => $path, 'separator' => $separator)), 'namespaces', $this->classLoader);
    }

    public function testRegisterException()
    {
        $this->setExpectedException('\LogicException');
        $this->classLoader->register('Foo');
        $this->classLoader->register('Foo');
    }

    /**
     * @dataProvider providerGetClassIncludePath
     */
    public function testUnregister($namespace, $path, $separator, $class, $expected)
    {
        $this->classLoader->register($namespace, $path, $separator);
        $this->classLoader->unRegister($namespace, $path, $separator);
        $this->assertAttributeSame(array(), 'namespaces', $this->classLoader);
    }

    public function testUnregisterException()
    {
        $this->setExpectedException('\LogicException');
        $this->classLoader->unRegister('Foo');
    }

    /**
     * @todo Implement testHasAutoloader().
     */
    public function testHasAutoloader()
    {
        $this->assertFalse($this->classLoader->hasAutoloader('Foo'));
        $this->classLoader->register('Foo');
        $this->assertTrue($this->classLoader->hasAutoloader('Foo'));
    }

    public function testSpl_autoload_register()
    {
        $this->assertAttributeEquals(false, 'registered', $this->classLoader);
        $this->classLoader->spl_autoload_register();
        $this->assertAttributeEquals(true, 'registered', $this->classLoader);
        spl_autoload_unregister(array($this->classLoader, 'autoload'));
    }

    public function testSpl_autoload_registerException()
    {
        $this->setExpectedException('\LogicException');
        $this->classLoader->spl_autoload_register();
        spl_autoload_unregister(array($this->classLoader, 'autoload'));
        $this->classLoader->spl_autoload_register();
    }

    public function testSpl_autoload_unregister()
    {
        $this->assertAttributeEquals(false, 'registered', $this->classLoader);
        $this->classLoader->spl_autoload_register();
        $this->classLoader->spl_autoload_unregister();
        $this->assertAttributeEquals(false, 'registered', $this->classLoader);
    }

    public function testSpl_autoload_unregisterException()
    {
        $this->setExpectedException('\LogicException');
        $this->classLoader->spl_autoload_unregister();
    }

    /**
     * @dataProvider providerGetClassIncludePath
     */
    public function testGetClassIncludePath($namespace, $path, $separator, $class, $expected)
    {
        $this->classLoader->register($namespace, $path, $separator);

        $r = new \ReflectionObject($this->classLoader);
        $property = $r->getProperty('namespaces');
        $property->setAccessible(true);
        foreach ($property->getValue($this->classLoader) as $namespace => $array) {
            $this->assertEquals($expected, $this->classLoader->getClassIncludePath($namespace, $array, $class));
        }
    }

    public function testAutoload()
    {
        // For code coverage to reach the file not found condition.
        $this->classLoader->autoload('Foo');
    }

    public function providerGetClassIncludePath()
    {
        // $namespace, $path, $separator, $class, $expectedResult
        // used to construct new ClassLoader($namespace, $path).
        // which then tries to load $class, and we should get back $expectedResult
        return array(
                array(
                        // Normal namespace
                        'Zikula\Core',
                        '',
                        '\\',
                        'Zikula\Core\Test',
                        'Zikula' . DIRECTORY_SEPARATOR . 'Core' . DIRECTORY_SEPARATOR . 'Test.php'),
                array(
                        // Normal namespace, requesting class from different namespace
                        'Zikula\Core',
                        'lib',
                        '\\',
                        'NamespaceTotallyDoesntExist\Core\Test',
                        false),
                array(
                        // namespace doesnt exist
                        'Zikula',
                        'lib',
                        '\\',
                        'NamespaceTotallyDoesntExist\Zikula\Core',
                        false),
                array(
                        // namespace doesnt exist
                        'Zikula',
                        'lib',
                        '\\',
                        'NamespaceTotallyDoesntExist\Zikula',
                        false),
                array(
                        // test with paths
                        'Zikula',
                        'lib',
                        '\\',
                        'Zikula\Test',
                        'lib' . DIRECTORY_SEPARATOR . 'Zikula' . DIRECTORY_SEPARATOR . 'Test.php'),
                array(
                        // test with namespace in classname
                        'Zikula',
                        'lib',
                        '\\',
                        'Extensions\A00Zikula',
                        false),
                array(
                        'Extensions',
                        '',
                        '\\',
                        'Extensions\A00Zikula\Init',
                        'Extensions' . DIRECTORY_SEPARATOR . 'A00Zikula' . DIRECTORY_SEPARATOR . 'Init.php'),
                array(
                        'Zikula',
                        'lib',
                        '\\',
                        'Zikula\Zikula\Test',
                        'lib' . DIRECTORY_SEPARATOR . 'Zikula' . DIRECTORY_SEPARATOR . 'Zikula' . DIRECTORY_SEPARATOR . 'Test.php'),
                array(
                        'Zikula\Core',
                        'lib',
                        '\\',
                        'TotallyDoesntExistsFakeFakeFake',
                        false),
                array(
                        // Test PEAR style libraries
                        'Dwoo',
                        'lib/vendor',
                        '_',
                        'Dwoo_Template',
                        'lib' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'Dwoo' . DIRECTORY_SEPARATOR . 'Template.php'),
                array(
                        // Test PEAR style libraries
                        'Dwoo',
                        'lib',
                        '_',
                        'Dwoo_Template_Compiler',
                        'lib' . DIRECTORY_SEPARATOR . 'Dwoo' . DIRECTORY_SEPARATOR . 'Template' . DIRECTORY_SEPARATOR . 'Compiler.php'),
                array(
                        // interesting case for PEAR style libs where top class lives outside the containing folder e.g.
                        // Foo.php
                        // Dwoo/Exception.php
                        'Foo',
                        'lib',
                        '_',
                        'Foo',
                        'lib' . DIRECTORY_SEPARATOR . 'Foo.php'),
                array(
                        // PEAR style libs
                        'Foo',
                        'lib',
                        '_',
                        'Foo_Exception',
                        'lib' . DIRECTORY_SEPARATOR . 'Foo/Exception.php'),
                array(
                        '',
                        '',
                        '\\',
                        'Zikula',
                        'Zikula.php'),
                array(
                        '',
                        '',
                        '_',
                        'Zikula_Test',
                        'Zikula/Test.php'),
                array(
                        '',
                        '',
                        '\\',
                        'Zikula\Core\Test',
                        'Zikula' . DIRECTORY_SEPARATOR . 'Core' . DIRECTORY_SEPARATOR . 'Test.php'));
    }

}
