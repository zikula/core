#!/usr/bin/env php
<?php

/**
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * Licensed under MIT.
 */

set_time_limit(0);

$rootDir = dirname(__DIR__);
$vendorDir = $rootDir.'/src/vendor';

array_shift($argv);
if (!isset($argv[0])) {
    exit(<<<EOF
Zikula vendors script management.

 vendor [command] (--reinstall) (--transport=[http|https|git])

Specify a command to run:

 install: install vendors as specified in deps or deps.lock (recommended)
 update:  update vendors to their latest versions (as specified in deps)
 lock:  lock vendors to their current versions

Reinstall (optional):

 Both 'install' and 'update' commands take an optional --reinstall option

Specify transport (optional)

 Valid values are: --transport=http, --transport=https or --transport=git

EOF
    );
}

if (!in_array($command = array_shift($argv), array('install', 'update', 'lock'))) {
    exit(sprintf("Command \"%s\" does not exist.\n", $command));
}

// determine transport method for git
$transport = false;
foreach ($argv as $k => $v) {
    if (in_array($v, array('--transport=http', '--transport=https', '--transport=git'))) {
        $transport = preg_replace('/^--transport=(.*)$/', '$1', $v);
        unset($argv[$k]);
    }
}

if (!is_dir($vendorDir)) {
    mkdir($vendorDir, 0777, true);
}

// versions
$versions = array();
if ('install' === $command && file_exists($rootDir.'/deps.lock')) {
    foreach (file($rootDir.'/deps.lock', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        $parts = array_values(array_filter(explode(' ', $line)));
        if (2 !== count($parts)) {
            exit(sprintf('The deps version file is not valid (near "%s")', $line));
        }
        $versions[$parts[0]] = $parts[1];
    }
}

$newversions = array();
$deps = parse_ini_file($rootDir.'/deps', true, INI_SCANNER_RAW);
if (false === $deps) {
    exit("The deps file is not valid ini syntax. Perhaps missing a trailing newline?\n");
}
foreach ($deps as $name => $dep) {
    $dep = array_map('trim', $dep);
    if ($transport) {
        $dep['git'] = preg_replace('/^(http:|https:|git:)(.*)/', $transport . ':$2', $dep['git']);
    }

    // install dir
    $installDir = isset($dep['target']) ? $vendorDir.'/'.$dep['target'] : $vendorDir.'/'.$name;
    if (in_array('--reinstall', $argv)) {
        if (defined('PHP_WINDOWS_VERSION_BUILD')) {
            system(sprintf('rmdir /S /Q %s', escapeshellarg(realpath($installDir))));
        } else {
            system(sprintf('rm -rf %s', escapeshellarg($installDir)));
        }
    }

    if ('install' === $command || 'update' === $command) {
        echo "> Installing/Updating $name\n";

        // url
        if (!isset($dep['git'])) {
            exit(sprintf('The "git" value for the "%s" dependency must be set.', $name));
        }
        $url = $dep['git'];

        if (!is_dir($installDir)) {
            system(sprintf('git clone --depth 1 %s %s', escapeshellarg($url), escapeshellarg($installDir)));
        }

        // revision
        if (isset($versions[$name])) {
            $rev = $versions[$name];
        } else {
            $rev = isset($dep['version']) ? $dep['version'] : 'origin/HEAD';
        }

        $status = system(sprintf('cd %s && git status --porcelain', escapeshellarg($installDir)));
        if (!empty($status)) {
            exit(sprintf('"%s" has local modifications. Please revert or commit/push them before running this command again.', $name));
        }
        $current_rev = system(sprintf('cd %s && git rev-list --max-count=1 HEAD', escapeshellarg($installDir)));
        if ($current_rev === $rev) {
            continue;
        }

        system(sprintf('cd %s && git fetch origin && git reset --hard %s', escapeshellarg($installDir), escapeshellarg($rev)));
    }

    if ('update' === $command || 'lock' === $command) {
        ob_start();
        system(sprintf('cd %s && git log -n 1 --format=%%H', escapeshellarg($installDir)));
        $newversions[] = trim($name.' '.ob_get_clean());
    }
}

// update?
if ('update' === $command || 'lock' === $command) {
    echo "> Updating deps.lock\n";

    file_put_contents($rootDir.'/deps.lock', implode("\n", $newversions));
}

